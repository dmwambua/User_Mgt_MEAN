hey everyone and welcome back to daily
00:03
tuition
00:04
in this complete tutorial you will
00:06
understand how to create the crude
00:07
operation
00:08
using express and mongodb database so
00:10
we're going to create
00:11
this user management system to manage
00:13
the user
00:14
i'm going to show you how to store and
00:16
retrieve all this data in the mongodb
00:18
cloud database
00:19
now let me show you how this application
00:21
work the application is very simple to
00:23
use
00:23
when you open the application you will
00:25
get the list of the user from the
00:26
database
00:27
now let me create a new user so i'm
00:29
going to click on this new user button
00:31
when you click on it you'll have a form
00:33
to create a new user
00:34
i'm going to create a new user so i'm
00:36
going to specify name to this user
00:38
then i'm going to specify email then i'm
00:40
going to specify gender
00:42
female and status inactive i want to
00:45
create this user so i'm going to click
00:47
on this save button
00:48
when i click on it i'm going to have the
00:50
alert message data inserted successfully
00:53
when i click on ok button this will
00:55
receive the form
00:56
and when you back to the all users here
00:58
you have your user
01:00
in case you want to update the user just
01:03
click on this edit button
01:04
i want to update this user so i'm going
01:06
to just click on this edit button
01:08
when i click on it the form will auto
01:10
field all the user data
01:12
inside this form so you just need to
01:14
specify the updated data
01:15
inside this form so i want to just
01:17
update this email
01:19
so here i'm going to specify test.com
01:24
and i'm going to change this status to
01:26
active now i want to update this data so
01:28
i'm going to click on this save button
01:30
when i click on it here i'm going to
01:31
have a message data updated
01:33
successfully when i click ok and back to
01:36
the all users
01:37
here i have the updated data now once
01:40
you understand how to create and update
01:41
the record
01:42
let me show you how to delete the record
01:44
from the database so i want to delete
01:46
this record
01:46
i'm going to click on this delete button
01:49
and when i click on it
01:50
you will have a message do you really
01:52
want to delete this record
01:53
yes i want to delete it so i'm going to
01:55
press on this ok button
01:57
when i click on it you will get an alert
01:59
message data deleted successfully
02:01
when you press ok the record is now
02:04
successfully deleted
02:05
from the database when you finish this
02:07
tutorial you will be able to work with
02:09
server
02:10
and client side you will completely
02:12
understand how to create
02:13
an api how to make the ajax request as
02:16
well as you will understand how to work
02:18
with
02:18
xio's library you will be able to work
02:21
with easy as template engine
02:23
and you will understand how to work with
02:24
different http methods
02:26
and so on if you are a beginner then
02:28
this is what you need
02:30
follow me and join this amazing journey
02:32
before wasting your too much time
02:34
let's get started
02:40
so let's get started and see how to
02:41
create this beautiful express crude
02:43
application
02:44
using node so what i'm going to do is
02:46
i'm going to open the visual studio code
02:47
editor and inside it i have this
02:49
tutorial folder
02:51
inside this tutorial folder i'm going to
02:53
create another folder
02:54
to create my project and i'm going to
02:56
name this folder
02:57
crude app if you want you can specify
03:00
any name to this folder that doesn't
03:02
matter
03:02
i'm gonna name this project crude app
03:04
i'm gonna create this folder
03:06
and inside this folder i'm gonna create
03:07
a new file and i'm gonna name this file
03:11
server.js this file is going to allows
03:14
us to start the server
03:15
so i'm gonna create a server.js file you
03:18
can name this file anything
03:19
and just after that i'm going to just
03:22
initialize
03:23
this project as npm package so i'm going
03:25
to open my terminal
03:27
and enter into my crude application
03:30
directory so here i'm going to say
03:32
cd crude app
03:35
when i press enter this will enter into
03:37
my crude application directory
03:39
and here i'm going to say npm init
03:42
this command will ask me few questions
03:44
about this package.json file so it will
03:47
just ask me
03:47
to specify the name for this package i'm
03:49
going to specify the default name
03:51
groot app leave the version as it is
03:54
here i'm going to say crude application
03:57
with express and mongodb
04:01
i'm gonna specify description just for
04:03
that i'm gonna specify entry point
04:04
server.js
04:05
i'm gonna leave this as it is test
04:07
command is going to be
04:08
as it is i'm gonna leave this git
04:11
repository
04:12
specific keyword crude and i'm gonna say
04:15
here
04:15
mongodb press enter and specify my name
04:19
here as author
04:21
i'm gonna specify the default license
04:23
and press
04:24
enter to create package.json file and
04:26
initialize this project as npm package
04:28
as you can notice i'm going to have here
04:30
a file package.json
04:32
and here i have my information as you
04:34
can notice here i have the start command
04:36
node server.js so when you execute this
04:39
command it's going to execute this
04:40
server.js file now just for that what i
04:44
want i want to install
04:45
some external module inside this project
04:47
so i can use it in this code application
04:49
so i'm going to open my terminal clear
04:52
the screen
04:53
and here i'm going to say npm i for
04:56
install
04:56
and then i'm going to specify my
04:58
packages so i'm going to install
05:00
few packages at the same time using a
05:02
single command
05:03
so here i'm going to say express in this
05:05
project we are using express
05:07
to rapidly develop the node application
05:09
so here i'm chris express
05:11
then i'm gonna install morgan as you
05:14
know morgan help us to log a message
05:16
every time
05:17
when we make a request just after that
05:19
i'm gonna install
05:20
nodemon make sure you specify space
05:22
between these modules
05:24
so i'm going to specify here nodemon
05:25
nodemon allows us to restart the server
05:27
automatically when we make changes in
05:29
the project
05:30
just after that i'm going to install ejs
05:32
which is the template engine
05:34
i'm using for this project egs allows us
05:36
to create dynamic html
05:38
just for that i'm going to install body
05:40
parser
05:42
body parser module allows us to
05:44
serialize the data
05:45
and access the form data using body
05:47
property
05:48
just out of that i'm going to install
05:50
dot env
05:51
dot inv module allows you to separate
05:53
the secret from your source code
05:55
this is useful in collaborative
05:57
environment where you may not want to
05:59
share your database login credential
06:01
with other people instead you can share
06:03
the source code
06:04
while allowing other people to create
06:06
their own dot env file
06:08
so once i have my dot env just after
06:10
that we are going to install
06:13
mongos using this module we are going to
06:15
connect this project with
06:16
mongodb database and at the last i'm
06:18
gonna install
06:20
axios library this library makes it easy
06:22
to make a request in express application
06:24
so i'm gonna say here axios i want to
06:26
install all these libraries as
06:28
dependencies
06:29
so i'm gonna press enter now as you can
06:32
notice we have these packages
06:34
inside this node modules folder if you
06:36
open the package.json
06:37
here you can notice in the dependency
06:39
section you have all your packages
06:41
let me just clear the screen and just
06:44
space over here a start command
06:45
so instead of node server.js here i'm
06:48
going to say
06:49
nodemon server.js node mod modules
06:52
allows us to restart the server
06:54
whenever we make a changes so i'm going
06:56
to say here nodemon
06:57
save the changes back to the server.js
07:00
and now let's create the project
07:02
structure
07:07
now let's take a look at how to create
07:09
project structure of this cloud
07:10
application
07:11
so whenever you make a big project in
07:13
node or in x-ray application you should
07:16
have the project structure
07:17
like this in your application you should
07:20
have the asset folder
07:22
in the root directory where all the
07:23
assets of your project is located
07:25
so inside this crude application inside
07:27
this code app folder i'm gonna create a
07:29
new folder
07:30
and name this folder assets
07:33
where i'm gonna have all the assets of
07:35
this project inside this asset folder
07:37
i'm gonna create a new folder
07:39
with the name css i'm gonna create a css
07:42
folder and inside the css i'm going to
07:44
have my css file
07:45
just for that inside this asset folder
07:47
i'm going to create another folder with
07:49
name
07:50
js so inside the js folder i'm going to
07:52
create
07:53
all the client-side javascript files
07:56
just for that
07:56
inside this asset i'm going to create
07:58
another folder with name img
08:01
so inside this img folder i'm going to
08:02
have all the images which we're using in
08:04
this project
08:05
i'm not using any image here but this
08:07
folder is just for
08:08
understanding just for that once you
08:10
have this asset folder
08:12
once you complete this asset folder
08:14
structure minimize this asset folder
08:16
and inside this crude app i'm going to
08:18
create another folder
08:20
so here i'm going to click on this new
08:21
folder icon and name this folder views
08:24
inside this views folder i'm going to
08:26
put all the html files
08:28
i'm using the embedded javascript
08:30
template engine to create a dynamic html
08:32
so i'm going to put all the html files
08:34
inside this views folder
08:36
this is the default folder of view
08:38
engine of express
08:40
just for that i'm going to create here
08:42
inside this group application
08:43
i'm going to create another folder i'm
08:45
going to name this folder
08:47
server and inside this server folder i'm
08:49
going to have all the server side code
08:51
for example inside this folder i'm gonna
08:54
create my services
08:55
model mongodb connection and so on
08:58
once you have your server folder inside
09:00
it i'm gonna create few folders
09:02
because we are following the mvc pattern
09:04
of application
09:05
i'm gonna create few folders inside this
09:07
server folder
09:08
mvc is application design pattern that
09:11
separates the application data
09:13
and business logic from the presentation
09:15
mvc stands for
09:16
module view and controller the
09:19
controller mediates between the model
09:21
and view so in the mvc pattern we have
09:24
model
09:24
controller and view you can notice we
09:27
already have the view folder here
09:28
so i'm not going to create that again
09:30
and now let's create the controller
09:32
and module folder inside this server
09:34
folder so here inside the server folder
09:36
i'm going to create a new folder
09:38
and name this folder controller
09:41
just start that inside this server i'm
09:44
going to create
09:44
another folder with name model
09:48
inside this model folder we are going to
09:49
work with mongodb data here we're going
09:51
to perform the data validation
09:53
processing data creating scheme
09:56
and so on
09:56
just for that we have controller inside
09:58
the controller we're gonna deals with
10:00
user request for resources
10:02
from the server so here in this
10:03
controller we're going to create a
10:05
different functions that's going to send
10:07
the resources to the user
10:08
so as you can notice we have this mvc
10:10
pattern m for model
10:12
v for views and c for controller now
10:16
just for that
10:16
inside this server i'm gonna create
10:18
another folder
10:20
this folder is for database connection
10:22
so i'm gonna create a new folder
10:24
and say database it is always a best
10:27
practice to separate your code
10:29
so you can maintain it very easily so
10:31
once i have this database folder
10:33
just after that i'm gonna create another
10:35
folder inside the server
10:37
and i'm gonna name this folder routes
10:39
inside these routes i'm gonna create my
10:41
different routes
10:42
just for that i'm gonna create another
10:44
folder inside the server
10:46
and name this folder services
10:49
so as you can notice your project
10:51
structure is now completely ready
10:53
inside your project you should have your
10:54
asset folder the server folder
10:57
and the views folder now once you have
10:59
the project structure
11:00
something like this let's create the
11:02
http server so let me just minimize
11:04
these folders
11:05
and in the server.js i'm going to create
11:08
my http server
11:14
now to create the http server i'm going
11:16
to just back to my server.js file
11:18
and inside it i'm going to first require
11:20
the express module so here i'm going to
11:22
say
11:22
constant express and call the required
11:26
function so using this function we can
11:28
use the express model
11:30
so using this statement we can use the
11:31
express module just for that
11:33
i'm going to create my app so here i'm
11:35
going to say constant
11:36
app is equal to express
11:40
like this i'm going to initialize this
11:42
app variable
11:43
as express application just after that
11:46
here i'm going to just create my default
11:47
route
11:48
so here i'm going to say app dot get and
11:51
here in the single code i'm going to
11:52
specify
11:53
root route so when the url match to the
11:55
root route i'm going to execute the
11:56
callback function
11:57
here i'm going to say request and
11:59
response i'm going to call the arrow
12:01
function of
12:02
es6 and here i'm going to say
12:05
response.send
12:06
and i'm going to send the response crude
12:09
application
12:10
to start that i'm gonna just listen the
12:12
server on port
12:13
3000 so i'm gonna say here app.listen
12:17
i'm gonna listen this board on three
12:19
thousand so here i'm gonna say
12:20
three thousand and just out of that as a
12:24
callback function
12:25
as a second argument to this listen
12:27
method
12:28
here i'm gonna call a callback function
12:31
like this
12:32
and say console.log and using the
12:34
backtick operator i'm gonna say
12:36
server is running
12:40
on http localhost
12:43
and then specify colon dollar sign and
12:46
then specify my port name
12:48
here i'm going to specify 3000 like this
12:50
save this file
12:52
open the terminal and as you know we
12:54
have the start command inside this
12:55
package.json file here
12:58
i'm going to execute this command and
12:59
execute this server.js file so here i'm
13:01
going to say
13:02
npm start so this command will execute
13:06
this nodemon
13:07
server.js and start the http server when
13:10
i press enter
13:11
you are going to get a message server is
13:12
running on http localhost 3000.
13:15
let me just click on this link and open
13:17
my application in the browser
13:19
oops i think i misspelled the l here i
13:21
misspelled this billing localhost
13:23
save the changes let me just click on
13:25
this link and as you can notice we're
13:26
gonna have
13:27
crude application as it responds now
13:29
once your server is successfully started
13:32
let me just make some changes inside
13:34
this http request
13:35
what i'm going to do is just after this
13:38
app
13:38
i'm going to create here a variable
13:40
constant port
13:42
is equal to and i'm going to store my
13:44
all details
13:45
inside the dot anv file so here i'm
13:48
going to say
13:49
process dot env dot
13:53
port and if the variable of this dot env
13:56
file
13:57
is not available i'm going to just pass
13:59
the default value
14:00
h0
14:03
and instead of this hardcoded 300 value
14:06
i'm going to pass this variable
14:07
like this save the changes open the
14:10
terminal
14:11
as you can notice the server is now
14:13
started on port
14:14
8 8080 because as you know we don't have
14:17
this port variable
14:18
inside dot env file so what i'm going to
14:21
do is i'm going to create
14:22
dot env file and create a variable
14:24
inside it and specify value to it
14:26
right now it's going to specify the
14:28
default value to this port variable
14:30
which is
14:31
8080 so now your server is running on
14:34
this 8080 port
14:35
i'm going to just create a new file
14:37
inside this cloud application
14:39
and name this file config dot
14:43
n v and inside this file i'm going to
14:46
create my port variable
14:47
creating a variable inside env file is
14:50
super easy
14:51
you just need to specify the variable
14:53
name and its value
14:54
using equal to sign so here i'm going to
14:56
say port
14:58
equal to sign and then specify the value
15:01
3000
15:02
so i'm going to specify 3000 value to
15:04
this port variable
15:06
let me just save the changes back to the
15:08
server.js
15:09
and now let me just save this file as
15:11
well but as you can notice
15:13
it's still getting the default port name
15:15
so what you need to do is you need to
15:16
specify the path of this config file
15:19
and you need to inform the express
15:20
server to use the variable
15:22
of this dot env file so just out of this
15:25
constant express
15:26
i'm going to say constant dot env
15:30
is equal to require and i'm going to
15:33
just call
15:34
dot inv module like this and just before
15:37
this port variable
15:39
here i'm going to say dot env
15:42
dot config i'm going to call the method
15:45
config
15:45
and inside this parenthesis i'm going to
15:47
specify the path of this config file
15:49
so we can use the port variable so here
15:51
i'm going to say
15:53
path and then specifying the single code
15:56
config dot env as you know we have this
15:59
config dot env file inside the root
16:01
directory so i don't need to specify any
16:03
relative path here
16:04
save through changes so as you can
16:06
notice this will just start the server
16:08
on port 3000 dot nv module allows you to
16:11
separate your secret
16:12
from your source code this is very
16:14
useful when you work with collaborative
16:16
environment
16:16
when you want to share your code with
16:18
other people so instead of sharing your
16:20
credential you can share the source code
16:23
while allowing other people to create
16:24
their own
16:25
dot env file now once you understand how
16:27
to create dot env let's move on
16:30
so just after that just after this dot a
16:32
and b down here i'm going to just add
16:34
the morgan module so up here i'm going
16:37
to say
16:38
constant morgan and call the require
16:41
statement and require the
16:43
morgan module just down here just after
16:47
this dot env i'm going to create here a
16:49
command log
16:50
request so as you know morgan module
16:53
allows us to log a request
16:55
on the console whenever we make a
16:57
request so here i'm going to say
16:59
app dot use and specify the
17:03
morgan module and inside it i'm going to
17:06
call the
17:07
tiny token so let me just reload the
17:09
browser
17:10
back to the editor and as you can notice
17:12
this will just print the type of request
17:14
the path and the response millisecond
17:16
now once you understand how to print a
17:18
log message using morgan
17:19
let me show you how to add body parser
17:21
inside this project
17:22
so let's see how to do it so let me
17:24
first stop the
17:25
server because we don't need it and now
17:28
let me add
17:29
body parts and module
17:35
now let me just add the body parts and
17:36
module so down here
17:38
i'm going to say constant body parser is
17:41
equal to require
17:44
and require the body parcel model and
17:47
just out of this
17:48
morgan down here here i'm going to
17:51
create a command
17:52
and say pass request
17:56
to body parser so down here i'm going to
18:00
say
18:01
app.use and inside this parenthesis
18:05
i'm going to call the bodyparcel module
18:07
dot
18:08
url encoded method and in the
18:10
parenthesis
18:11
i'm going to specify object with
18:13
property
18:14
extended true so this will just pause
18:17
the request
18:17
of the content type from url encoded
18:20
so once you link the body parser module
18:23
just down here
18:24
i'm gonna just set the view engine so
18:26
here i'm gonna say set
18:28
view engine and as you know in this
18:31
project i'm using
18:32
embedded javascript so here i'm gonna
18:34
say app.set
18:37
and in the parenthesis i'm gonna first
18:38
specify the view engine
18:40
parameter so we can space out the view
18:43
engine to this
18:44
express application and then we need to
18:46
specify the type of
18:48
view engine i'm using so in the double
18:50
quote i'm going to specify the extension
18:52
of real engine i'm using ejs
18:54
view engine so i'm gonna specify here
18:56
egs if you're using pug or html
18:59
you can specify here html or
19:02
bug that's up on you i'm using the ejs
19:06
template engine so i'm gonna specify the
19:07
template name
19:08
egs just for that if you create all your
19:11
egs file
19:12
inside this views folder then you don't
19:15
have to specify the folder name
19:17
to this hs template engine but if you
19:19
change
19:20
this views folder for example you create
19:22
another folder inside this
19:24
views folder and put all your ejs files
19:26
inside that folder
19:27
then you need to inform express to set
19:30
that folder
19:31
as a default view engine folder so to do
19:34
that
19:34
you need to call a statement app dot set
19:38
and in the parentheses you need to
19:40
specify views
19:41
as a first argument and then specify the
19:44
path of that folder
19:45
so what you need to do is you need to
19:47
call the path module of node application
19:49
so here i'm gonna say constant path is
19:52
equal to
19:54
require and require the inbuilt
19:57
path module as you know i did not
20:00
install this path module using npm
20:02
because the path module is inbuilt in
20:05
node application
20:06
you just need to require it so once i
20:08
require the path module
20:09
just down here at the second argument
20:12
i'm going to say
20:13
path dot resolve i'm going to call
20:17
method of path
20:18
result and then i'm going to specify
20:20
here director name
20:21
so this will just return the project
20:24
directory name
20:25
to this resolve method just out of that
20:28
i'm going to specify comma here
20:29
and in the double code you need to
20:31
specify the folder name
20:33
where you put all your egs files so for
20:36
example if you put all your ejs files
20:38
inside ejs folder then you need to
20:40
specify here
20:42
views forward slash ejs
20:45
i'm not going to create any dedicated
20:47
folder for this egs file so i'm not
20:49
going to add this
20:50
statement here so i'm going to comment
20:52
it this is just for reference
20:54
now just for that once i specify the
20:55
view engine for this application
20:58
just down here i'm going to just load my
21:00
asset so here i'm going to say
21:02
load assets i'm going to load my asset
21:05
using middleware method yes so i'm going
21:07
to call here use method
21:09
and i'm going to first specify the
21:10
virtual path for these
21:12
assets so as you know we have assets
21:15
inside this asset folder
21:16
so i'm going to space up a single code
21:18
and specify path for this css folder so
21:21
here i'm going to say
21:21
css then specify comma
21:25
and then say express dot static
21:28
i'm going to call the static method of
21:29
express i'm gonna say path
21:31
dot resolve and call the directory name
21:34
so this will return the current project
21:36
directory name specify comma
21:38
and in the double quote i'm gonna say
21:40
assets
21:41
i'm gonna specify this this asset folder
21:43
name forward slash
21:45
css so now if you create the style.css
21:48
file inside this css folder
21:50
you need to just specify css forward
21:53
slash style.css now for example let's
21:55
say you have style.css file inside the
21:57
css folder
21:58
here inside the css i'm going to create
22:00
a file style.css
22:02
and now you want to access this file so
22:04
what you want to do is you just need to
22:05
specify a path
22:07
like this css forward slash style dot
22:10
css that's it you don't need to specify
22:13
the
22:13
project name the asset folder and so on
22:16
you need to just specify the virtual
22:18
path
22:19
and the file name that's it now once you
22:22
understand how to add this
22:23
css styling let me just load the images
22:26
and javascript files
22:27
so i'm gonna just duplicate this
22:28
statement so i'm gonna press shift alt
22:30
down key two times and here i'm gonna
22:34
just change this
22:35
css to img this css became
22:39
img and this became
22:42
js like this now as you can notice we
22:46
successfully load
22:47
the asset inside this http server next
22:50
we're going to create views for this
22:51
express application
22:57
now let's take a look at how to create
22:59
html templates for this crude
23:01
application
23:02
as you know i already set up the view
23:04
engine ejs to this code application
23:06
so let's create dot easiest files to
23:08
create html template
23:10
so what i'm gonna do is inside this
23:12
views folder
23:13
i'm gonna create a new file and i'm
23:16
gonna name that file
23:17
index dot ejs as you can notice
23:20
i'm gonna specify the extension ejs this
23:22
is not the html file
23:24
if you want to learn more about ejs you
23:26
can head on to ejs
23:28
website right here hs dot co
23:31
ejs stands for embedded javascript
23:33
templating
23:34
from eggs.go you can get started with
23:37
egs
23:38
and understand how to work with easier's
23:40
template let me just close this tab
23:42
back to my project and inside this index
23:45
dot egs
23:46
i'm going to create a simple html5
23:47
snippet so i'm going to press
23:49
exclamation mark
23:50
and press tab this will simply create
23:52
the simple html5 snippet
23:54
and here to this document i'm going to
23:57
specify
23:58
title crude application
24:01
just out of that inside this body down
24:04
here i'm going to create
24:06
the header so i'm going to first create
24:07
here html command
24:09
and say here header let me just close
24:12
this command to indicate this is the
24:13
closing header
24:14
like this and inside this header i'm
24:17
going to create a header
24:18
tag with id so i'm going to specify here
24:20
hash
24:21
specify id name header when i press tab
24:24
i'm going to have
24:25
header tag with id header inside this
24:27
header i'm going to create a now tag
24:29
and inside this now i'm going to create
24:31
a division tag with the class
24:32
container so here i'm going to say dot
24:35
container
24:35
when i press tab i'm going to have a
24:37
divisor tag with the class container
24:39
just after that inside this container
24:41
i'm going to create a div
24:42
with the class text center i'm going to
24:45
create all these classes in the
24:46
style.css file so don't worry about that
24:48
so when i press tab i'm going to have
24:50
this text center class to this division
24:53
tag
24:54
inside this div i'm going to add anchor
24:55
tag i'm going to specify forward slash
24:58
this refers to the root route of this
25:00
application just out of that here i'm
25:02
going to specify class
25:04
now brand and text dark
25:07
i'm going to create these classes in the
25:08
style.css file here i'm going to say
25:11
user management system
25:15
save the changes so let me just open my
25:17
terminal
25:18
here i'm going to say npm start and
25:21
press enter
25:21
my server is turning on http localhost
25:24
3000
25:25
this will return the response crude
25:26
application now what i want
25:28
i want to return the response of this
25:30
html file
25:32
instead of this response
25:35
so instead of this response i want to
25:37
render this index.ejs file
25:40
so what i'm going to do is here i'm
25:41
going to call a method of response
25:44
object
25:45
here i'm going to say response dot
25:48
render this method allows us to render
25:50
an html file
25:51
so i'm going to say here render in the
25:54
single code i'm going to specify the
25:55
file name
25:56
here i'm going to say index.ejs you
25:58
don't have to specify
26:00
extension for this file name because we
26:01
already initialized this view engine
26:04
with ejs extension and just are that
26:07
don't forget to specify semicolon
26:09
back to the browser and reload it as you
26:11
can notice i'm going to have
26:12
the user management system text so this
26:14
will just load
26:15
the index file on the root route
26:18
let me just change few things inside
26:20
this index.ages
26:22
i'm going to just get this header and
26:23
put that header in the separate
26:25
dedicated
26:26
header file and bring this footer and
26:28
put it
26:29
inside a separate footer file so you can
26:31
manage it
26:32
more easily what we are going to do is
26:34
inside these views
26:36
i'm going to create a new folder and i'm
26:38
going to name this
26:39
include if you want you can name this
26:42
folder anything
26:43
inside this folder i'm going to create a
26:45
new file
26:47
with underscore to indicate this is the
26:49
partial file of
26:50
index.hs so here i'm going to say
26:53
underscore
26:54
header dot ejs to indicate this is the
26:57
partial file i'm going to start this
26:59
file name with
26:59
underscore in this header i'm going to
27:02
just grab this header
27:03
right from here from this closing header
27:07
cut it from this index.js and paste it
27:10
inside this header.hs save the changes
27:13
back to the index.ejs and grab this
27:15
closing body and this html
27:18
cut it right from here create a new file
27:21
inside this ink load
27:23
and name that file underscore buddha dot
27:26
ejs
27:27
and put this closing body and html
27:30
inside this file
27:32
back to the index dot and here i'm gonna
27:34
include
27:35
both these files so i'm gonna just first
27:37
add a command
27:38
an html command and here i'm gonna say
27:41
include
27:42
header don't forget to close this
27:44
command to indicate this is the closing
27:46
header section of this template now
27:49
inside this command
27:50
i'm going to add my ejs syntax to
27:52
include both these files
27:54
so here i'm going to call each syntax
27:56
like this
27:57
and inside this ejs syntax
28:00
i'm going to say include in the
28:03
parentheses i'm going to specify the
28:04
path
28:05
of my partial files so in the single
28:08
code
28:08
i'm going to specify include forward
28:11
slash
28:12
then specify the header file like this
28:15
and as you know we have the prefix
28:18
underscore so i'm going to specify
28:19
underscore as a prefix for this file
28:21
you just start that i'm going to copy
28:24
this
28:24
statement and paste it down here
28:28
change this header to footer
28:31
like this and change this header file to
28:34
footer
28:36
like this save the changes and if you
28:39
open your terminal
28:40
then you can notice you make the changes
28:42
inside your ejs files
28:44
but the server is not restarted because
28:47
the nodemon is only restart
28:49
when you make changes in the js files so
28:51
we need to inform
28:52
nodemon to restart the server whenever
28:55
we make changes
28:56
inside these ejs files but instead of
28:58
informing nodemon
29:00
to restart the server every time when we
29:02
make the changes inside this file
29:04
i'm going to create a demo html file and
29:07
use a live server extension of
29:09
visual studio code editor i'm going to
29:11
create dot html file
29:13
and create a complete design inside that
29:15
file and use the live server extension
29:17
of visual studio code editor so we can
29:19
easily save the changes and restart the
29:21
server
29:22
so instead of restarting the server and
29:24
reloading the browser i'm going to stop
29:26
this server like this close this
29:30
terminal
29:30
and inside these views i'm going to
29:33
create a new file
29:34
just for design and here i'm going to
29:36
say index.html
29:39
just after that inside this file i'm
29:41
going to put all these
29:42
index.ejs code so here i'm going to call
29:44
this
29:45
header like this and this
29:48
footer save the changes and now let me
29:51
just
29:51
start the live server so i'm going to
29:53
just open my extension
29:55
of the wishes to record editor and here
29:57
you can notice i have the live server
29:59
extension
30:00
installed in this register record editor
30:02
if you don't have this extension just
30:04
search for it in this search extension
30:07
text box
30:08
just search for live server and open it
30:11
i already have the slide server so i'm
30:12
not going to install it again
30:14
using the slide server this will launch
30:16
a development local server with
30:18
live reload feature so whenever you make
30:20
any changes
30:21
inside html file this will automatically
30:24
reflect
30:24
on the live server you don't have to
30:26
restart the server every time
30:27
when you make changes so once i install
30:30
this live server extension
30:32
let me just open this file in the live
30:33
server so i'm going to just right click
30:35
here
30:36
and say open with live server as you can
30:39
notice i'm going to have the same result
30:41
this is my node application server and
30:43
this is my live server extension
30:46
now we are going to work on this live
30:48
server so let me just close this
30:50
node application server now just after
30:53
that once i have this
30:54
live server let me just start designing
30:57
this beautiful body section of this
31:02
website
31:04
what we are going to do is once i have
31:05
the header of this website let me just
31:07
create the main section of this website
31:09
i'm going to create html command and say
31:12
main
31:12
site let me just copy this command paste
31:15
it down here
31:17
and close it inside this main section
31:19
i'm going to say
31:20
main and create id to this main tab
31:23
so here i'm going to say site main i'm
31:26
going to create a main tag with id
31:27
sitemain just for that i'm going to
31:29
create a container
31:31
with div and inside this container
31:34
i'm going to create a box nav class so
31:36
here i'm going to say dot
31:38
box nav with this box now i'm going to
31:41
add another class
31:42
reflex and i'm going to add justify
31:47
between class you can notice here how i
31:49
specify different classes
31:51
in the visual studio code editor when i
31:52
press tab you can notice i have all
31:54
these classes to this division tag
31:56
inside this div i'm gonna create an
31:58
anchor tag and specify the path
32:01
add user so when you click on this
32:03
anchor tag this will navigate us to this
32:05
add user
32:06
url and just for that i'm going to
32:08
specify here class
32:09
border shadow inside this anchor tag i'm
32:14
going to create a spatter
32:16
with class text
32:19
gradient just sort of that here i'm
32:21
going to create a text
32:23
new user and here i'm going to add an
32:26
icon
32:26
as you know i did not included any
32:29
library
32:30
inside this project so i'm gonna just
32:32
add a simple library so i can import
32:34
icons inside this project so i will just
32:36
back to my browser and open a new tab
32:38
and here i'm gonna search for font
32:40
awesome cdn
32:42
so i'm going to link this font using
32:45
content delivery network so i'm going to
32:46
just click on this cdnjs.com
32:49
open this in a new tab and
32:52
in this tab i'm going to open the font
32:54
awesome icons
32:56
this one and i'm going to just back to
32:57
the cdnjs.com
32:59
copy this first link all mean dot css
33:02
right from here and paste it in the
33:04
header section of this website
33:06
so just out of this title here i'm going
33:08
to paste this link
33:09
like this back to the browser and back
33:12
to the icons fonts
33:13
and right from here i'm gonna first
33:15
select the user icon
33:17
so here i'm gonna say user and i'm gonna
33:19
select this icon this one
33:20
user i'm gonna right click here and say
33:23
open in a new tab
33:24
as you can notice here you can access
33:26
this icon using this code
33:28
this one just copy it and paste it
33:30
wherever you want to add that icon
33:32
here i'm going to paste that code like
33:34
this back to the website
33:36
and as you can notice you have your icon
33:38
here so this is how you can add
33:40
different icons inside this project so
33:43
once you understand how to add these
33:44
icons inside your project let me just
33:46
back to my project
33:47
and just sort of this division tag right
33:49
down here
33:50
i'm going to create a simple html
33:52
command and say
33:53
form handling and here i'm going to say
33:57
form i'm going to create an html form
34:00
and specify the root route to this form
34:03
so when we click on this form
34:04
i want to redirect the user to the root
34:06
route
34:07
just sort of that don't forget to
34:09
specify method which is post
34:11
and inside this form i'm going to create
34:14
my table here i'm going to say table to
34:17
this table i'm going to specify class
34:19
which is stable
34:21
inside this table here i'm going to
34:22
create t head
34:24
the header of this table with the class
34:27
d head dot i want to specify dark color
34:31
to this head section so i'm going to
34:32
specify class t doc
34:34
inside this head i'm going to create
34:36
table row
34:38
in th i'm going to specify id
34:41
then i'm going to duplicate this th like
34:44
this
34:45
change this id and here i'm going to say
34:47
name
34:48
this became email i'm going to specify
34:51
here at
34:52
sign email then i'm going to specify
34:55
here
34:56
gender this became status
35:00
and at the last i'm going to specify
35:02
here
35:03
action just down here just after this
35:06
t head after this closing t head i'm
35:09
going to create
35:10
t body i'm going to create a tag t body
35:14
and inside this t-body i'm going to
35:16
create the body of this
35:17
table so let me just save the changes
35:19
first back to the project and here you
35:21
can notice i have my table
35:23
and now inside this body i'm going to
35:25
specify data
35:26
to this table so here inside this body
35:29
i'm gonna create table row and table
35:32
data
35:33
i'm gonna first specify id so i'm gonna
35:35
space over here one
35:37
duplicate this statement like this
35:40
change this second text to name
35:43
or you can specify name here and here
35:46
i'm going to specify
35:47
example html.com then i'm going to
35:50
specify gender
35:52
which is mail status is going to be
35:55
active and inside this dd i'm gonna add
35:59
delete and edit button so here i'm gonna
36:02
get rid of this one
36:03
and inside this td i'm gonna add delete
36:05
and update button
36:07
so here i'm gonna create two anchor tags
36:09
that help us to edit and delete
36:11
these records so here i'm going to add
36:13
ag attack and i'm not going to specify
36:15
here anything right now
36:16
so i'm going to specify here hash then
36:19
specific class
36:20
btn border shadow
36:24
and then to access this anchor tag i'm
36:25
going to add a class
36:27
update so this will just indicate this
36:29
is the button for update
36:31
inside this anchor tag i'm going to
36:32
create a spawn tag
36:34
and to this spawn tag i'm going to
36:36
specify class text
36:39
then inside this pawn i'm going to add
36:41
my icon so here inside this pawn i'm
36:44
going to add
36:44
i tag with the class pass
36:48
f a pencil alt so this will import the
36:52
pencil icon
36:53
inside this anchor tag let me just save
36:55
the changes back to the project and here
36:57
you can notice
36:58
oops where is my icon oops i think i
37:00
misspelled here
37:02
pencil back to the project and here you
37:04
can notice i have my icon here
37:06
inside my project let me just close this
37:09
unwanted tabs
37:11
back to my project copy this anchor tag
37:13
completely
37:14
and paste it down here instead of update
37:17
i'm gonna say here delete i'm not gonna
37:20
specify here any http attribute here so
37:23
i'm going to get rid of this http
37:24
attribute
37:25
because i don't want to detect the user
37:26
anywhere just out of that
37:28
i'm going to just specify icon to this
37:31
delete
37:32
so here i'm going to say pass if a
37:35
times save the changes and here you can
37:38
notice i have
37:39
my icon now once i have my design
37:42
of this html let me just link my
37:44
style.css file to this
37:46
index file and style this html page
37:53
so to style this index file i'm going to
37:55
just add
37:56
one style.css file here so i'm going to
37:58
say here link
37:59
specify the path of the style.css file
38:02
so inside this asset
38:04
i have css folder and the style.css
38:07
save the changes and back to the
38:09
style.css
38:11
and let me just style this index file so
38:13
very first
38:14
i'm going to add the phone family inside
38:16
this project i'm going to open a new tab
38:19
and say google fonts
38:22
and from this google phone's website i'm
38:24
going to import some fonts
38:25
inside this project and use it so in the
38:28
search box i'm going to search for
38:30
barlow this font i'm going to select
38:34
the normal style the regular 400 style
38:39
i'm going to select the style then back
38:42
to the main page
38:43
and i'm going to select pt sans this one
38:46
i'm going to select this font and i'm
38:48
going to select this regular 400 so i'm
38:50
going to click on this select the style
38:52
and as you can notice i have here two
38:54
options to import this font
38:55
inside my project here i have the link
38:58
tag and the import tag i'm going to use
38:59
this import tag
39:01
copy this import statement and paste it
39:04
at the top of this style.css file like
39:06
this
39:07
once i imported these fonts inside my
39:09
project
39:10
let me just create some variables so
39:12
here i'm going to add colon
39:14
root and inside this root i'm going to
39:17
create some variables
39:18
so here i'm going to say double dash
39:21
dark
39:22
and specific color to this dark variable
39:24
and then i'm going to specify the hex
39:26
value of the color
39:27
like this so i can use this dark color
39:30
using this
39:30
dark variable name so i'm going to
39:32
create few variables here inside this
39:35
root directory i just started that down
39:38
here
39:39
i'm going to select all the elements of
39:42
the html
39:43
and remove padding i'm going to specify
39:46
padding 0
39:47
margin is going to be 0 and
39:51
box sizing is going to be border box
39:55
just for that i'm going to select all
39:57
the anchor tags
39:58
let's specify text decoration none
40:02
this will remove the bottom border from
40:03
the anchor tags then i'm going to
40:05
specify the font family
40:06
so i'm going back to the google font and
40:08
here you can notice i have this pt sense
40:11
i'm going to copy this phone family
40:12
paste it here save the changes
40:14
this will just apply this ptsense font
40:17
family to this
40:18
text just down here i'm going to create
40:21
my container
40:22
so i'm going to create a container class
40:24
container
40:26
inside it i'm going to say max width
40:29
is going to be 10 24
40:33
pixel then i'm going to say margin auto
40:36
this will just center all the content of
40:38
this container
40:39
as you can notice this will send to this
40:41
content just down here
40:43
i'm going to say now brand then specify
40:47
font size
40:48
is going to be 1.5
40:51
and on width is going to be bold
40:56
this will update this title just down
40:59
here
41:00
i'm going to say d flex i'm going to
41:03
create a d flex class
41:05
and specify display flex
41:08
let's specify flex wrap wrap
41:11
save the changes you can find this class
41:13
right here
41:15
you have this d flex and this justify
41:18
between
41:19
oops i think i specified here dash just
41:21
remove it and separate both these
41:23
classes
41:24
back to the style and just down here
41:27
i'm gonna say justify between
41:31
then specify justify content space
41:35
between just down here i'm going to
41:38
create a class
41:39
text center and here i'm going to say
41:42
text align
41:43
center then i'm going to say border
41:46
shadow and then specify
41:49
border one pixel solid
41:53
and call my variable so here i'm going
41:54
to say var double dash and call the
41:57
variable name
41:58
border btn just out of that here i'm
42:00
going to say box
42:02
shadow and here i'm going to say 1 pixel
42:05
3 pixel and 10 pixel
42:09
as well as i'm going to specify here hex
42:12
color
42:12
to this shadow like this down here i'm
42:16
going to create a class
42:18
text dark this will specify dark color
42:20
to the text so here i'm going to say
42:22
color
42:23
dark just down here i'm going to say in
42:26
line
42:28
and specify display inline block
42:31
so whenever you want to specify inline
42:33
block display property to the element
42:34
you can specify this inline class
42:37
i'm going to say here text light color
42:40
is going to be
42:41
light save the changes just down here
42:45
i'm going to say text gradient
42:48
and to this text gradient class i'm
42:50
going to specify text gradient to this
42:52
text so i need to add some useful css
42:55
properties
42:55
to specify gradient color to the text so
42:58
inside this class i'm going to specify
43:00
background property
43:01
to specify linear gradient so here i'm
43:04
going to say
43:05
liner gradient and inside this liner
43:08
gradient i'm going to specify
43:09
2 gradient color so here i'm going to
43:11
say to write
43:12
space of my comma and then i'm going to
43:14
specify two gradient colors here
43:16
just sort of that here i'm going to
43:18
specify webkit
43:20
background clip property this is this
43:24
property is not actually supported to
43:25
the chrome browser so i'm going to
43:27
specify here webkit as an extension to
43:28
this
43:29
background clip property and here i'm
43:31
going to specify
43:32
text and then i'm going to specify here
43:35
background clip
43:36
text just down here i'm going to specify
43:39
hyphen
43:41
webkit text field color
43:44
and i'm going to specify text field
43:46
color transparent
43:49
see the changes as you can notice this
43:51
will just add
43:52
gradient color to these icons because we
43:55
have
43:55
text gradient class to this html element
43:58
just down here just out of this class
44:01
i'm going to create
44:02
my header section so i'm going to first
44:03
select the header
44:05
and then select the nav class inside
44:08
this now i'm going to specify background
44:10
color
44:11
and i'm going to specify here hex color
44:14
this one
44:15
and inside this now i'm going to add
44:16
some padding to it
44:18
one em to the top and bottom and zero
44:20
for the left and right
44:21
then add a width which is 100 percent
44:25
save the changes this will just add
44:27
background color
44:28
and add some width to the snapdragon
44:30
just down here
44:31
i'm going to select the site main then
44:33
select the margin top
44:35
6 em so this will add the top
44:39
margin to this table and just after that
44:42
i'm going to copy this
44:44
phone family and paste it here save the
44:47
changes
44:48
this will add some margin this table and
44:51
add this phone family
44:53
now just for that i'm gonna add some
44:54
styling to this button
44:56
so i'm gonna select first site main
45:00
then select the container class then
45:03
select the
45:04
box now and inside it i have the anchor
45:06
tag
45:07
i'm going to select it specify font size
45:09
1 em
45:11
and padding is going to be 0.5 am to the
45:14
top and bottom
45:15
and 1 am to the left and right save the
45:18
changes
45:19
this will just add padding to this
45:21
button
45:22
just out of that i'm going to select the
45:24
form so i'm going to select this
45:25
container and this
45:27
sidemane selector like this
45:30
then select the form and i'm going to
45:33
add some margin to this form
45:34
so here i'm going to say margin 2 em to
45:37
the top and bottom and zero for the left
45:39
and right
45:40
just after that just sort of that i'm
45:42
going to select this table
45:44
then specify border spacing
45:47
0 pixel and width is going to be
45:50
100 just start that here i'm going to
45:53
select
45:54
dot table td select all the td element
45:58
then select the table again and select
46:00
all the th element
46:02
and specify padding 0.75
46:06
em and then i'm going to specify
46:09
vertical align top just start that
46:14
i'm gonna specify text align center
46:18
and border top is going to be
46:21
one pixel solid and then specify my
46:25
border color
46:26
this one like this just out of that
46:29
i'm going to select the button this
46:31
one's
46:32
so here i'm going to say table
46:35
then select the td class inside it i
46:38
have
46:38
anchor tag with the class btn i'm going
46:42
to select it
46:43
specify padding 0.3 em
46:46
to the top and bottom and one em
46:49
to the left and right then add font size
46:52
1.1 em and margin is going to be
46:57
zero for the top and bottom and point
47:00
two am to the left and right
47:02
save the changes this will add some
47:04
padding to these
47:05
buttons just down here i'm gonna add
47:08
hover effect
47:09
on this table so here i'm gonna say dot
47:13
table on tr i'm gonna add her effect
47:16
here i'm gonna say background color and
47:19
then i'm gonna add this
47:21
background color this one like this
47:24
save the changes when i hold on this row
47:27
i'm gonna have this background effect
47:29
just so that as you can notice when i
47:31
hover on this row
47:32
i want to remove this background shadow
47:34
from these buttons
47:35
so i'm gonna select first table then
47:38
select
47:38
table row and when i hover on it i want
47:41
to remove the shadow from the
47:42
button so here i'm going to select table
47:44
data inside it i have
47:46
anchor tag i'm going to select that
47:48
anchor tag and say here
47:50
box shadow none save the changes
47:54
whenever on this row i will not get any
47:56
box shadow to these buttons
47:58
just down here i'm going to just make
48:00
this table dark
48:01
so here i'm going to select table t head
48:04
dot i already have this class to the
48:06
table head section
48:08
just for that i'm going to select the
48:10
edge element
48:11
and specify color white so here i'm
48:14
going to specify hex color
48:16
then specify background color background
48:19
color is going to be dark so i'm going
48:20
to call here my dark
48:22
background variable like this just down
48:24
here i'm going to specify
48:26
border color and this is going to be
48:30
a light color so i'm going to select the
48:33
hex value and specify that
48:35
like this save the changes as you can
48:38
notice
48:39
i have the dark color to this table head
48:42
now as you can notice
48:43
we successfully specify a beautiful
48:44
style to this html page
48:47
next i'm going to show you how to make
48:48
this table responsive
48:54
now we can understand how to make this
48:56
table responsive so let me first open
48:58
the inspect tool of chrome
49:00
click on this toggle device toolbar and
49:03
specify here viewport
49:05
then 24. if the viewport is less than
49:08
that
49:09
i want to make this table responsive so
49:12
i'm going to just back to my style.css
49:14
file
49:14
and down here i'm going to say add the
49:17
date
49:18
media only screen
49:21
and say here and max width
49:25
if it is 1 0 24 pixel then i want to
49:28
change
49:29
few properties of this table so here i'm
49:31
going to first select table
49:33
then select t head then select
49:36
t body then select the edge element
49:40
dd and tr and specify
49:44
display block save the changes
49:47
just down here i'm going to say t head
49:50
table row and to this table row i'm
49:53
going to specify position
49:55
absolute top is going to be minus
49:59
99999 just out of that i'm going to
50:02
specify left
50:03
minus 49 pixel so this will just remove
50:07
the top section of this table when the
50:09
viewport is less than
50:10
1024 pixel just down here i'm going to
50:12
specify table row
50:14
then specify border one pixel
50:18
solid and then i'm going to add my
50:21
border
50:22
variable just down here i'm gonna say
50:25
table
50:26
data then specify border
50:29
none and border bottom
50:33
is going to be one pixel solid and then
50:36
specify my
50:37
border variable just after that down
50:41
here i'm going to say position
50:43
relative let me just remove this border
50:45
and that's better
50:46
and save the changes okay notice the
50:49
table is now
50:50
responsive if you want you can add the
50:52
table head as well
50:54
but i don't want to add that that is why
50:56
i'll remove that header
50:57
from this application so now your table
50:59
is now responsive
51:01
now once you understand how to make this
51:02
table responsive let me show you how to
51:05
create a new user form
51:06
in this project so when you click on
51:08
this new user button
51:09
i want to navigate user to the new form
51:11
where the client can specify their
51:13
username
51:14
email gender and status so i'm going to
51:16
create a new form
51:17
where the user can specify their
51:19
information so i'm going to just back to
51:21
my editor
51:22
and inside this editor here i'm going to
51:24
create a new
51:26
file so inside this views i'm going to
51:28
create a new file
51:30
and name this file add
51:33
user dot html to start that
51:36
inside this file i'm going to just copy
51:38
all the code from this
51:39
index.html and paste it inside this add
51:43
user file
51:44
like this and instead of this
51:47
table i'm going to add form here so what
51:50
i'm going to do is i'm going to get rid
51:51
of this
51:52
action attribute from this form and here
51:55
i'm going to specify
51:56
id which is update
52:00
user like this save the changes
52:04
and open this file in the live server so
52:06
here i'm going to specify
52:08
add user dot html so as you can notice
52:11
this will just open this file
52:12
and just sort of that i'm going to make
52:14
some changes inside this
52:16
box now so i'm going to get rid of this
52:18
anchor tag here i'm going to create
52:20
filter class and space over here an
52:23
anchor tag
52:24
with a root hdf attribute then specify
52:26
text
52:27
on users save the changes
52:30
back to the project and here you can
52:32
notice you have the all user text here
52:35
let me add here an icon so let me just
52:38
back to my project
52:39
and
52:42
i'm going to specify here pass if a
52:45
angle
52:47
double left save the changes
52:50
this will add this icon to this text
52:53
just sort of that just out of this
52:55
box nav down here i'm going to create
52:57
another div
52:58
with form title class as well as i'm
53:01
going to specify text
53:02
center class and here i'm going to
53:04
create it to heading tag
53:06
with text new user
53:10
and specified class to it which is text
53:13
dark and after this h2 heading tag i'm
53:16
going to add here a spawn tag
53:18
with a class text light
53:21
and specific text here use the below
53:25
form to create a new
53:28
account save the changes back to the
53:31
project
53:32
and you will see the result something
53:33
like this now just for that down here
53:35
inside this form i'm going to add a
53:37
division tag
53:38
with the class new user
53:42
and inside this new user i'm going to
53:44
create a division tab so here i'm going
53:46
to say
53:46
form group and inside this form group
53:50
i'm going to create a label for name
53:54
and specified class text light
53:57
then specify text name then create
54:01
input of the type hidden then specify
54:05
name to it
54:06
id and specify value and just for that
54:10
i'm going to specify here
54:11
input type text specify
54:15
name attribute which is name
54:18
and value is going to be empty and then
54:20
specify
54:21
placeholder which is mark
54:24
stoinis save the changes back to the
54:27
project and here you can notice i have
54:29
my form
54:30
input element if you want you can
54:31
specify any placeholder here
54:33
just after that i'm going to create
54:35
another input element
54:37
so i'm going to copy this form group
54:39
paste it down here
54:40
and instead of name here i'm going to
54:42
say email this for became
54:44
email then i'm going to get rid of this
54:47
input hidden
54:48
and change this placeholder here i'm
54:51
going to say
54:52
example at the right gmail.com
54:56
and name attribute is going to be email
54:59
you just start that copy this form group
55:02
again
55:03
paste it down here and this time
55:07
i'm gonna specify for
55:10
gender don't forget to change this email
55:13
to
55:13
gender and here i'm gonna create a
55:16
division tag
55:17
with class radio button so here i'm
55:20
going to create a class radio
55:21
with inline class so here i'm going to
55:24
say dot
55:25
inline as you know we already have this
55:27
class inside style.css file
55:30
this will specify display in line to
55:32
this division tag
55:33
inside this div i'm going to grab this
55:35
input and paste it
55:37
and i'm going to change this type and
55:38
specify type radio
55:40
then name is going to be gender
55:44
and value is going to be male i'm gonna
55:47
get rid of this placeholder
55:49
and then specify this label copy this
55:51
label paste it
55:52
down here like this just specify here
55:56
mail back to the browser and here you
55:58
can notice you have
55:59
the radio button mail just out of that
56:02
i'm gonna copy
56:03
this radio like this paste it down here
56:07
change this value to female
56:10
and this became female save the changes
56:15
here you can notice you have two radio
56:17
buttons
56:18
i'm gonna do the same for the status as
56:20
well
56:21
so i'm gonna just copy this form group
56:25
right from here like this and paste it
56:28
down here
56:30
and instead of this gender i'm going to
56:33
specify here
56:34
status this became status
56:38
like this value became
56:42
active and inactive
56:46
i'm going to change it to active and
56:49
this became
56:50
inactive so here i have a status active
56:53
and
56:54
inactive now let me just add a button to
56:56
submit this form
56:57
so just out of this form group right
56:59
down here
57:00
i'm gonna add form group class
57:04
and inside it i'm gonna add a button and
57:07
this is the type of submit button
57:10
then specify class to it btn
57:14
text dark update and then i'm going to
57:17
specify
57:18
save as a text save to changes and back
57:21
to the browser
57:21
here you can notice i have the button
57:23
save now let me just add styling to this
57:25
form
57:30
once you understand how to create this
57:32
beautiful add user form
57:33
let me specify some styling to it let me
57:36
just back to my editor and open the
57:37
style.css file
57:38
and just toggle this window on the right
57:40
side of the screen
57:41
down here i'm going to create a command
57:43
add user
57:45
and update user template
57:48
because i'm going to use the same
57:49
starting for update
57:51
and add user form so i'm going to first
57:54
select
57:54
the form title class then specify margin
57:59
top is going to be 2em just after that
58:02
i'm going to specify here dot form title
58:06
and then select the h2 heading tag
58:09
padding is going to be
58:11
0.5 em to the top and bottom just down
58:14
here
58:14
i'm gonna select the new user class and
58:17
then specify
58:19
max width 786 pixel
58:23
and margin is going to be auto
58:26
save the changes just down here i'm
58:29
going to select the
58:30
update user id and then select form
58:33
group class then i'm going to specify
58:35
margin
58:36
0.4 em to the top and bottom and zero
58:39
for the left and right
58:40
sales changes this will add some margin
58:42
between these elements
58:44
as you know i'm using the same form for
58:47
the add user as well so i'm going to
58:48
copy this selector
58:50
paste it down here and change this
58:52
update user
58:53
to add user like this
58:56
just sort of that down here i'm going to
58:58
say update user
59:00
and then i'm going to select form group
59:02
and then i'm going to select input
59:04
of the type text and to this input tags
59:08
i'm going to specify
59:09
with 100 then specify
59:13
padding which is 0.6 em
59:16
to the top and bottom and one am to the
59:18
left and right
59:20
then i'm going to specify margin which
59:22
is
59:23
0.5 em to the top and bottom
59:26
and zero for the left and right
59:29
then i'm going to specify border which
59:32
is
59:33
one pixel solid
59:36
and specify border to it like this
59:40
save the changes this will change the
59:42
border of this text box
59:44
just down here i'm going to specify
59:46
found family to this
59:47
text boxes so i'm going to copy this
59:49
this bordello
59:50
font family and specify that to this
59:53
text box
59:54
which is down here i'm going to specify
59:56
font size
59:57
1 em and border radius
60:01
is going to be 0.2 em save the changes
60:05
and this will something look like this
60:07
just out of that as you know i'm going
60:08
to specify the same styling to the add
60:10
user as well so i'm going to copy this
60:12
selector
60:12
specify comma here and paste the
60:14
selector again
60:16
and instead of update user i'm gonna say
60:18
here
60:19
add user save the changes
60:23
down here i'm gonna specify styling to
60:26
this radio buttons
60:27
so i'm going to paste the selector again
60:30
and instead of input
60:31
type text here i'm going to select
60:34
radio and i'm going to specify margin
60:38
1 em to the top and bottom and 2 am to
60:40
the left and right
60:42
save the changes so this will add some
60:44
margin to these radio buttons
60:46
just after that i'm going to apply this
60:47
styling to the add user as well
60:50
and user save the changes and now
60:53
if we just take a look at this form then
60:55
this radio buttons
60:57
is very ordinary i want to specify some
60:59
styling to it
61:00
to make this form more attractive so i'm
61:03
going to just back to my style.css and
61:04
down here i'm going to apply some
61:06
styling
61:07
to these radio buttons so here i'm going
61:09
to create css command
61:11
and specify adding style to radio
61:14
buttons
61:15
so here i'm going to first select radio
61:17
then select
61:18
input and it is a type of
61:21
radio so in the single code i'm gonna
61:24
say radio
61:25
just start that i'm gonna specify
61:27
position absolute
61:29
and opacity is going to be zero save the
61:32
changes
61:33
this will remove the radio buttons right
61:34
from here just down here
61:37
i'm going to select this selector and
61:39
just add
61:40
a before content to it so here i'm going
61:42
to say radio
61:44
label and add before
61:47
pseudo selector so here i'm going to say
61:49
content specify empty string
61:52
then specify background which is
61:55
border btn i'm going to specify this
61:57
color
61:58
border btn then i'm going to specify
62:00
border radius
62:02
100 border is going to be
62:05
one pixel solid border
62:08
i'm going to call my variable border
62:11
just for that what i'm going to do is
62:12
i'm going to add
62:13
this class to the label first so i can
62:16
see the result here
62:17
so i'm going to just back to the add
62:19
user
62:20
and as you can notice i have here a
62:22
radio button
62:23
with label so i'm going to specify here
62:25
a class so instead
62:27
of this text light i'm going to specify
62:29
here radio label
62:31
like this don't forget to specify to
62:34
this
62:34
gender as well like this
62:37
save the changes as you can notice i
62:40
have the results something like this
62:42
back to the style.css and down here i'm
62:45
going to add styling to this
62:47
radio buttons so just start this border
62:50
i'm going to specify display
62:52
inline block width is going to be 1 em
62:56
and height is going to be 1 em then
62:59
i'm gonna add position which is relative
63:02
and
63:02
top is going to be minus 0
63:06
em just for that i'm going to specify
63:08
margin right
63:09
0.5 am and vertical alignment
63:13
is going to be top save the changes
63:16
just after that cursor is going to be
63:19
pointer
63:20
text alignment center and then i'm going
63:22
to add a transition
63:24
to this radio button so here i'm going
63:25
to add webkit
63:27
transition and select the css property
63:30
so i'm going to select here
63:31
all 250 millisecond
63:34
and specify function is then specify
63:38
the transition property and specify here
63:41
all
63:42
250 millisecond is
63:46
just down here i'm gonna first select
63:49
this
63:49
selector and paste it down here like
63:52
this
63:52
and then i click on this radio button so
63:55
i'm gonna call here
63:56
an event check so when i click on this
63:59
radio button
64:00
i want to select this radio label before
64:04
sudo selector and specify
64:07
background color and i'm going to
64:08
specify background color to this
64:11
radio button and then specify box shadow
64:14
in set 0 0 0
64:18
4 pixel and then specify a simple light
64:21
gray color to it
64:22
save the changes just after that i'm
64:24
going to copy this selector
64:26
paste it down here when i focus on this
64:29
radio button
64:30
i want to select this before sudo
64:32
selector and then specify
64:34
outline none and border color
64:38
is going to be this one just after that
64:42
i want to disable the check property so
64:44
here i'm going to select
64:45
this selector like this paste it down
64:48
here
64:48
and if the radio button is disabled
64:52
i want to select this before pseudo
64:54
selector and then specify
64:56
box shadow insert 0 0
64:59
0 4 pixel and then i'm going to specify
65:03
this color so i'm going to copy this
65:05
property and specify that
65:07
here just out of that i'm going to
65:08
specify border color
65:11
and specify the hex value here as well
65:13
as i'm going to specify background color
65:15
and specify the same hex value
65:17
save the changes and now let me just
65:20
check my radio buttons
65:21
when i click on the radio buttons oops
65:23
nothing is happening
65:25
this is because you backed your add user
65:28
here you can notice this input type
65:30
radio and this label
65:31
is not connected so how do i connect
65:34
both this element
65:35
i can connect them using id so i'm going
65:38
to specify here id
65:40
radio 2 if you want you can specify any
65:42
id
65:43
to this radio button but keep in mind
65:46
this id
65:46
and this 4 need to be equal so i'm going
65:50
to specify radio 2 to this label and to
65:52
this input type radio
65:53
i'm going to do the same but this time
65:56
i'm going to specify id here
65:58
radio 3 and 4 is going to be
66:01
radio 3 do the same for this gender as
66:04
well
66:05
so here i'm going to specify id
66:08
radio 4 4 is going to be radio 4
66:13
then this radio button is going to be id
66:16
radio 5 and this became radio
66:20
5 save the changes and let me just click
66:23
on this radio buttons
66:24
as you can notice this is now working
66:27
just after that let me just style this
66:28
button
66:29
so i'm going to just back to my
66:30
style.css and down here i'm going to
66:32
style this button
66:33
down here i'm going to select first
66:36
update user
66:37
then select the form group class and
66:39
then select
66:40
btn class at the same time i'm going to
66:43
select the add user as well
66:45
like this add user and here i'm gonna
66:49
specify
66:50
width hundred percent then specify
66:54
padding point nine em
66:57
nine em to the top and bottom and one
66:58
aim to the left and right
67:00
then specify background color and i'm
67:02
going to select this background color
67:04
specify that here then i'm going to
67:06
select border
67:07
which is none on family and i'm going to
67:10
specify this
67:12
font family this pt sense like this
67:15
just down here i'm going to specify font
67:17
size 1 em
67:19
cursor is going to be pointer
67:22
and border radius 0.2 em and margin
67:26
is going to be 0.5 em to the top and
67:29
bottom and zero for the left and right
67:31
save the changes and as you can notice
67:33
the button is now successfully ready
67:35
let me just add some hover effect on
67:37
this button so let me just copy the
67:38
selector
67:39
paste it down here and add hover effect
67:42
on it
67:43
over and then i'm going to specify
67:45
background color
67:46
i want to add dark color when i hover on
67:48
this button
67:49
and then color is going to be water now
67:52
as you can notice the styling of this
67:54
template is now completely ready
67:56
next i'm going to show you how to
67:58
convert this html into ejs template
68:00
engine
68:05
now let's understand how to convert this
68:08
dot html template into ejs template
68:10
engine
68:11
so i'm going to just expand this editor
68:13
and open the index.js
68:15
here you can notice i have the footer
68:17
and this header
68:18
so what i'm going to do is i'm going to
68:20
open the index.html
68:22
and here is the main section of this
68:23
website so i'm going to copy this main
68:25
section
68:26
and paste it between this footer and
68:29
this header
68:30
right here like this and just on that
68:34
i'm going to grab all the content of
68:35
this table data
68:37
and put it in a separate partial file so
68:40
i can manage it
68:41
very easily i'm going to grab this table
68:43
row
68:44
like this right from here save the
68:47
changes
68:48
open the explorer tab and here i'm going
68:50
to create a new file inside
68:52
this include folder i'm going to create
68:54
a new file
68:56
with name show.ejs
68:59
and inside this file i'm going to paste
69:01
all this content like this
69:03
save the changes and let me just back to
69:05
my index.hs
69:07
copy this ejs syntax and paste it here
69:09
like this
69:10
and instead of footer i'm gonna say here
69:13
show save the changes open the terminal
69:17
and i'm gonna start the server
69:18
npm start this will just start the
69:21
server on localhost 3000
69:23
let me just open it as you can notice
69:25
the styling is not
69:26
actually applied to this template
69:28
because if you back to the
69:30
header i don't have the style here
69:33
so just add this title down here i'm
69:36
going to add styling
69:37
so here i'm going to say link and
69:40
specify here style.css so here i'm going
69:42
to say css
69:43
modern slash style.css
69:46
css is the prefix of this style.css
69:50
as you can notice here if we open the
69:51
server.js we specify here css
69:54
this is the prefix of this asset css
69:56
folder
69:57
just for that don't forget to link this
70:01
font awesome website so i'm going to
70:03
copy this font awesome website link
70:06
this cdn and paste it before this
70:09
link tag like this save the changes back
70:12
to the website and reload it
70:13
as you can notice the style is now
70:15
successfully applied to this
70:17
project just so that what i want when i
70:19
click on this
70:20
new user i want to navigate user to the
70:23
add user form
70:25
so what i'm doing i'm going to create a
70:26
new file inside this
70:28
views folder and name this file
70:32
and user dot ejs and here
70:35
inside this add user i'm going to put
70:37
all the code of this add user dot
70:40
html file this one so i'm gonna first
70:42
copy
70:43
this heading section and the footer
70:45
section of this website
70:47
so i'm gonna just copy this heading
70:49
paste it inside add user
70:51
like this copy the footer
70:54
paste it inside the add user like this
70:58
so once i have the header and footer of
71:00
this website
71:01
let me just put the main section of this
71:03
website so i'm gonna open the add user
71:06
copy this main section and paste it
71:09
inside this add user dot ejs and now i'm
71:12
gonna grab this
71:13
form and put it in a separate
71:16
partial file so i'm gonna grab this form
71:20
like this inside this include
71:23
i'm gonna create a partial file with the
71:25
name
71:26
form dot each s and here i'm going to
71:29
paste
71:30
this form save the changes back to the
71:33
add user
71:34
i'm going to copy this easier syntax and
71:37
here i'm going to add that
71:39
each syntax so here i'm going to first
71:41
add html command
71:42
and say add user form
71:45
i'm going to paste the ejs syntax and
71:47
call
71:48
form dot ejs file save the changes
71:52
back to the index index.ejs so what i'm
71:55
going to do is i'm going to create about
71:57
a new route and render this add user
72:00
file
72:00
so i'm going to just back to my
72:02
server.js copy this
72:04
get request paste it down here
72:08
and for the add user
72:11
i'm gonna render this add user template
72:14
so here i'm gonna say
72:15
add user make sure the file name is
72:18
exactly same
72:20
so i'm gonna specify this name and
72:22
render it back to the project
72:24
and when you click on this new user this
72:26
will navigate you
72:27
to the add user now just for that let me
72:30
just back
72:31
to my root route so i'm going to click
72:32
on this all user this will just
72:34
navigate us to the root out of this
72:36
website so when i click
72:37
on this edit button i want to navigate
72:40
user to the update page
72:42
of this website as you can notice here
72:44
in this website i don't have the update
72:46
page
72:46
let me create it in the views i'm going
72:49
to create a new file
72:51
with name update user dot
72:54
ejs and i'm going to put all the code of
72:58
this
72:59
and user inside this update user file so
73:02
i'm going to copy
73:03
all this code like this and paste it
73:06
inside this
73:08
update user file i'm going to change
73:11
this text
73:12
to update user and i'm going to change
73:15
this as well
73:16
use the below form to update an account
73:20
just after that i'm not going to use
73:22
this add user form
73:23
inside this update user so i'm going to
73:26
copy
73:27
all this code and paste it
73:31
right here save the changes
73:34
back to the form dot ejs and as you can
73:37
notice
73:38
inside this update dot user i have the
73:41
id
73:42
update user inside this form dot i have
73:46
the same id
73:47
update user i'm going to change it to
73:50
add user so once i specify add user you
73:53
can notice in the style.css
73:55
i specify the same styling to both these
73:58
forms
73:59
to the update and to this add user form
74:02
now just after that as i said earlier
74:05
when i click on this
74:06
button i want to navigate user to the
74:09
update page
74:10
so let me first close the unwanted files
74:13
from here let me just back to the issue
74:16
dot ejs
74:18
and here i specify the hash inside this
74:21
update
74:21
button let me just specify here forward
74:24
slash
74:24
and specify update user
74:28
save the changes back to the server.hs
74:31
and create a new route for update copy
74:34
this get request
74:35
paste it down here and specify here
74:39
update user and instead of add user
74:42
here i'm going to specify update
74:45
user i'm going to specify this file name
74:48
update user
74:49
save the changes and reload the browser
74:51
and when you click on this edit button
74:53
as you can notice this will navigate you
74:55
to the update page
74:57
let me just back to the root route and
74:58
when you click on this new user
75:01
here you can add a new user and from
75:03
this edit button you can edit
75:05
the user or you can say you can update
75:07
the user information
75:09
now once we complete the styling and
75:10
convert all the html into egs
75:12
let me just delete this index files so
75:16
i'm gonna delete this add user.html
75:20
and index.html
75:24
let me just minimize these folders
75:27
now once you understand how to work with
75:28
the client side of this project
75:31
next we're going to start working on the
75:32
server side of this project
75:34
so in the next lecture we're going to
75:35
create a different route and connect the
75:37
mongodb database
75:38
to this project
75:44
once you understand how to work with
75:46
client side of this application
75:48
let's take a look at how to work with
75:49
server side so i'm going to open my
75:51
editor and i'm going to just create
75:53
the server side of this application so
75:55
as you can notice here
75:56
in this server.js file i have these
75:58
routers
75:59
i'm going to separate this router from
76:01
this server.js file
76:03
and create a dedicated router file so
76:05
what i'm going to do is i'm going to
76:06
create a new router file inside this
76:08
router folder you can notice here i have
76:10
this router folder inside this
76:12
server folder so i'm going to just click
76:14
on this router
76:15
and here i'm going to create a new file
76:17
so i'm going to click on this new file
76:18
icon
76:19
and name this file router.js
76:23
and in this file i'm going to create my
76:25
routers so i'm going to grab
76:27
all this router like this cut it from
76:30
the server.js
76:32
and paste it right here like this
76:35
and just start that as you know i don't
76:38
have
76:39
this app variable so inside this router
76:41
i'm gonna say
76:42
constant express is equal to
76:46
and require the express module like this
76:49
and just sort of that i'm not going to
76:51
create here constant
76:53
app and then specify the express
76:55
application because
76:56
this statement will create a new app
77:00
so what i want instead of creating a new
77:02
app here
77:03
i'm going to call a method of express so
77:06
here
77:07
instead of this constant app i'm going
77:09
to say constant route
77:11
is equal to express dot
77:14
router this method allows us to create
77:16
different router in a separate file so
77:19
instead of app i'm gonna use this
77:21
route variable like this
77:24
so now you can import this file inside
77:26
server.js
77:27
and use this routes let me just save the
77:30
changes save this file back to the
77:32
server.js
77:33
and down here i'm going to create a
77:35
command and say
77:37
load routers and here i'm going to say
77:40
app.use
77:41
and specify a root path and to this root
77:45
path i'm gonna require this file so here
77:47
i'm gonna say require in the single code
77:49
specified dot forward slash server
77:53
inside the server i have routes and
77:55
inside this route i have
77:57
router just for that save this file as
78:00
well
78:01
and back to the router.js you can notice
78:03
here i just created
78:05
three routes here but i didn't export at
78:07
it so let me first export this route so
78:10
i can use it in this server.js
78:12
so down here i'm gonna say module
78:15
dot exports is equal to route
78:18
so now i can use this route variable in
78:21
server.js
78:22
save the changes back to the server.js
78:25
save this file
78:26
as well and reload the application as
78:28
you can notice the application is
78:29
working fine
78:30
now let me just back to my server and
78:32
back to the router.js file
78:34
you can notice here i have these
78:36
callback functions inside this router.js
78:39
instead of creating these callback
78:41
functions inside this parenthesis
78:43
of this get method i'm going to separate
78:45
this callback function
78:47
so i can maintain it so inside the
78:49
services
78:50
i'm going to create a new service for
78:51
this router so inside the services i'm
78:54
going to create a new file
78:55
and name this file render.js
78:59
this file is going to allow us to render
79:01
different files
79:02
using router so what i'm going to do is
79:04
i'm going back to the
79:05
router.js and as you can notice the
79:08
first route is going to render the index
79:10
file so inside this render.js here i'm
79:14
going to say
79:14
exports dot home route
79:18
and i'm going to specify a callback
79:20
function so here i'm going to say
79:21
request and response parameter
79:23
and call an arrow function like this now
79:26
this export keyword is going to export
79:28
this function so i can use it in other
79:30
files so inside this function
79:32
i'm going to just grab this response dot
79:34
render
79:35
and paste it here like this so i'm going
79:38
to say here response dot render and
79:40
render the index file
79:42
save the changes back to the router.js
79:45
and here instead of this callback
79:46
function i'm going to call this
79:48
home route function so i'm going to just
79:50
first require this file
79:52
so i'm going to say constant services
79:56
is equal to require and here i'm going
79:59
to use pass
80:00
services render.js this file
80:04
just are that i'm going to use the
80:06
services instead of this callback
80:07
function
80:08
so i'm going to get it off this callback
80:09
function right from here like this
80:12
specify comma to specify the second
80:13
argument to this method
80:15
and then i'm going to say services dot
80:19
home routes that's it save the changes
80:22
and now when you reload the browser
80:24
it will completely work fine so now you
80:26
can notice here
80:27
this route is now very easy to
80:28
understand this is the route path
80:31
and i'm gonna call this function when
80:33
the route is match
80:34
let me just add here a description for
80:36
this route
80:37
so here i'm gonna just add some
80:38
documentation for this route
80:40
add the rate description root route
80:43
or you can specify here home route as
80:45
well and the method is going to be
80:48
get just out of that i'm going to do the
80:49
same for this route as well
80:51
and for this route as well so i'm going
80:54
back to my render.js file
80:56
and down here i'm going to say exports
80:59
dot add user and i'm going to just
81:02
specify a callback function
81:04
request and response parameter and
81:07
inside it i'm going to render a file
81:09
as you know here i'm going to just
81:11
render this add user
81:12
so i'm going to copy it paste it here
81:15
just add that
81:16
here i'm going to say exports dot
81:19
update user is equal to
81:23
call the request and response parameter
81:25
with arrow
81:27
and then i'm gonna just render this
81:29
update file
81:30
save the changes back to the router.js
81:33
and instead of this callback functions
81:35
i'm gonna just specify here
81:38
services dot add user
81:41
and this became services dot
81:45
update user that's it save the changes
81:48
save this file as well
81:49
back to the browser and reload it and
81:51
let me just check my other pages as well
81:54
when i click on this new user this will
81:56
open the add user route
81:58
and if i click on this edit button this
82:00
will open the update user
82:02
route now just for that let me just back
82:04
to router.js
82:05
copy this documentation paste it here
82:07
and this route
82:09
is for add users and this is the type of
82:13
get request
82:14
on and user do the same for this last
82:18
route
82:19
and to the description i'm going to
82:21
specify
82:22
for update user and this is going to be
82:25
the get request
82:26
and route is going to be update user
82:30
now once you understand how to create a
82:31
routing in this application let's take a
82:33
look at how to connect the mongodb to
82:35
this application and create
82:37
the testful api
82:44
now let's understand how to connect the
82:46
mongodb to the project
82:47
so i'm going to open a new tab in my
82:49
browser and here i'm going to say
82:52
db i'm going to search for mongodb and
82:55
here i have the result
82:57
www.mongodb.com i'm going to head on
82:59
to this website and from here i'm going
83:01
to connect my application to mongodb
83:03
in the previous lecture i already
83:05
explained how to work with mongodb
83:07
locally i created different documents
83:09
and collection using shell
83:11
now because we are working on a big
83:13
project i'm not gonna store all the data
83:15
in the localhost because
83:16
if accidentally my hard disk crash i
83:19
could lost all my data
83:21
so instead of storing all these data
83:23
inside my hard disk
83:24
i'm gonna store it on cloud when you
83:26
open the mongodb.com
83:28
you have the mongodb at last where you
83:30
can store all your data
83:31
so what i'm gonna do is i'm gonna click
83:32
on this start free and
83:34
here you can notice you have mongodb at
83:36
last from here
83:37
you can store your data on cloud
83:39
database mongodb atlas is fully managed
83:42
cloud database developed by the same
83:43
people
83:44
that build mongodb at last handle all
83:47
the complexity
83:48
of deploying managing and handling your
83:50
deployments on a cloud service provider
83:53
of your choice so instead of working on
83:55
localhost we're gonna work on
83:57
cloud database so what i'm gonna do is
83:59
i'm gonna specify my information and
84:01
create
84:02
a new account on mongodb so i'm going to
84:04
click on this sign up button of google
84:06
and sign in with my gmail account
84:08
once i sign in with mongodb class you
84:10
would have the result something like
84:12
this
84:12
if you are creating an account for the
84:14
first time mongodb atlas will ask you to
84:16
specify name
84:17
of your organization you can specify
84:19
your individual name here
84:21
and proceed once you proceed you will
84:23
have the result something like this
84:24
here you can create a new project and
84:26
create a new cluster
84:28
cluster is going to manage all your
84:30
cloud data so what i'm going to do is
84:32
here i'm going to click on this new
84:33
project button to create a new project
84:35
i'm going to click on it and specify
84:37
name for this project
84:38
i'm going to choose name crude i'm going
84:41
to specify name to this project crude
84:43
and click on this next button and then
84:45
i'm gonna add
84:46
member and set permissions i'm not gonna
84:48
specify any member
84:50
or add any permission here instead i'm
84:52
the owner of this database so i'm gonna
84:54
just click on this
84:54
create project so this will just take
84:56
few seconds to create
84:58
a new project so here you can notice the
85:00
project is now created
85:01
with the name crude and now let's create
85:04
a new cluster
85:05
so i'm going to just click on this build
85:06
a cluster and here you can notice we
85:08
have different cluster
85:10
i'm going to use the free one so i'm
85:11
going to click on this create a free
85:12
cluster
85:13
now here you need to specify the cloud
85:15
provider i'm going to use aws
85:17
and i'm going to choose my nearest
85:19
server i'm in asia so i'm going to
85:21
choose mumbai
85:22
then i'm going to leave everything as it
85:23
is and click on create cluster
85:26
now this will just take few minutes to
85:28
create a new cluster
85:29
once your cluster is successfully
85:30
created click on this database access
85:32
from the security right here and create
85:35
a database user
85:36
so we can access the database so i'm
85:37
going to click on this add new database
85:39
user
85:40
so i'm going to create a new user with
85:42
authentication
85:43
so here i'm going to specify admin and
85:46
specify password
85:48
admin 123 and click on this add user
85:52
button
85:52
this will create the admin user with
85:55
admin 123 password
85:57
and here you can notice we have
85:58
resources all resources so this will
86:01
just allows us to access
86:02
all the resources of the database you
86:05
can edit the user as well from these
86:07
buttons or if you want you can create
86:09
and delete the database from these
86:10
buttons as well
86:12
now just for that i'm going to click on
86:14
this network access
86:16
and add my ip address so i can access
86:19
this database
86:20
so i'm going to click on this add ip
86:22
address and here
86:24
i'm going to click on this allow access
86:25
from anywhere
86:27
i don't want to show my ip address so
86:29
i'm not going to click on this
86:30
add current ip address i'm going to
86:32
click on this allow from anywhere
86:34
just like this and click on this conform
86:36
so this will just allows me
86:38
to access this database from any local
86:40
host just wait a minute
86:42
so once you have the status active you
86:44
will only be able to connect
86:45
your cluster from this list once you
86:48
specify the database access
86:50
and network access let's back to the
86:53
cluster
86:54
and from this cluster i'm going to click
86:55
on this connect button to connect this
86:57
cluster
86:58
to my web application so i'm going to
86:59
click on this connect and click on this
87:02
connect your application here you can
87:04
notice you have the connection string
87:06
using this connection string i'm going
87:08
to connect this application to my
87:09
project
87:10
so i'm going to copy this connection
87:11
string by clicking on this copy button
87:14
and close this window back to my project
87:16
and open the config.env file
87:18
and here i'm going to create a new
87:20
variable with name
87:22
uri and specify this
87:26
mongodb url like this and don't forget
87:29
to specify password
87:31
and database name so i'm gonna get rid
87:33
of this
87:34
password field right from here and i'm
87:37
gonna specify my password
87:39
admin one two three so this is my
87:42
password of this admin user
87:44
just out of that i'm going to specify
87:46
the database name so i'm going to get it
87:48
off this
87:48
angle brackets and this db name and
87:51
specify the
87:52
database name i'm going to specify name
87:54
users
87:55
so this is my database name if you want
87:57
you can specify any name to this
87:58
database that doesn't matter
88:00
now once i import this connection string
88:02
in this application
88:03
let me connect the mongodb database to
88:05
the application
88:06
i'm going to save this file and close it
88:09
just so that inside the server inside
88:12
this database folder i'm going to create
88:13
a new file
88:15
and name this file connection
88:18
dot js and inside this file i'm going to
88:21
make
88:21
the mongodb connection so i'm going to
88:23
first say here constant
88:25
mongoose is equal to and
88:29
require the mongoose module using
88:32
mongo's module
88:33
we can connect the mongodb database to
88:35
the application so here i'm going to say
88:37
constant
88:37
connect db i'm going to create here a
88:40
function
88:41
db and call sync and await function so
88:44
here i'm going to say
88:45
a sync specify the parentheses and call
88:48
the arrow function
88:49
so i'm going to just create a
88:50
synchronous function using
88:52
async and await just for that here i'm
88:54
going to call try
88:56
and catch inside this try
89:00
i'm going to make mongodb connection so
89:02
here i'm going to create a command
89:04
and say mongodb
89:07
connection string just down here i'm
89:10
going to say constant
89:12
connection is equal to call the await
89:15
function like this and say mongoose
89:19
dot connect i'm going to call a method
89:22
of mongoose which is mongoose connect
89:25
just after that in the parenthesis i'm
89:27
going to say
89:28
process dot enb dot
89:31
and then i'm going to call this variable
89:34
89:35
uri this one right here just like this
89:38
so now as you can notice i'm going to
89:40
just pass this variable name
89:41
just start that i'm going to specify
89:43
here comma to specify
89:45
second argument and in the curly braces
89:47
i'm going to just stop
89:48
warnings in the console when i use
89:50
mongodb connection
89:52
so here i'm going to say use new url
89:54
parser
89:55
true then i'm going to call a new
89:57
property called use
89:59
unified topology and i'm going to just
90:02
make this
90:02
property true just out of that i'm gonna
90:05
say use
90:06
find and modify false
90:10
and use create index
90:13
true so these properties will stop
90:15
unwanted warnings in the console
90:17
now just are that down here just after
90:19
this connection
90:20
here i'm going to say console.log
90:24
and using the backtick operator i'm
90:26
going to say
90:27
mongodb connected
90:30
and specify the connection string so i'm
90:32
going to call dollar in the curly braces
90:34
i'm going to say
90:35
con dot connection dot
90:38
host and just out of that if there is
90:41
any problem
90:42
while connection i'm going to say
90:44
console.log
90:46
and print the error message and exit
90:49
from this process so here i'm going to
90:50
say process dot
90:52
exit and specify 1 which is true and
90:55
don't forget to export this function so
90:58
down here
90:59
i'm going to say module dot exports
91:02
is equal to connect db
91:06
just for that back to the server.js and
91:09
let me just call this connection here
91:12
i'm going to just require the mongodb
91:13
file so here i'm going to say constant
91:16
connect db is equal to
91:19
and require the connection file so here
91:21
i'm going to say
91:22
server database and then i'm going to
91:24
select
91:25
the connection file this one and using
91:28
this connect db
91:29
i'm going to call this function
91:31
connectdb
91:32
so just down here just after
91:35
this morgan right down here
91:38
i'm going to add a command and say
91:41
mongodb
91:42
connection and just add here connect db
91:45
and specify parenthesis so i'm going to
91:47
just call
91:48
this function inside this server.js file
91:53
let me just open my terminal and save
91:55
this file when i save this file
91:57
you can notice i have the console
91:59
message i'm going to be connected
92:01
and this is the cluster hostname so
92:03
using this message
92:04
this is confirmed that the mongodb is
92:06
successfully connected to this
92:08
application
92:09
so once you understand how to create the
92:10
mongodb connection
92:12
let me show you how to create api and
92:14
make crore operations
92:20
now once you understand how to create
92:22
the successful connection of
92:23
mongodb let me just show you how to
92:25
create a scheme
92:26
in mongodb but let me first close this
92:29
unwanted
92:30
files right from here and now
92:33
let me just open the model folder and
92:36
inside it i'm going to create
92:38
the mongodb scheme so i'm going to
92:39
create a new file
92:41
and name this file model
92:44
dot js and inside this model i'm going
92:47
to create a mongodb scheme
92:49
so here i'm going to say constant
92:52
mongoose
92:53
is equal to and require
92:56
the mongoose module just for that here
92:58
i'm going to save our
93:00
scheme is equal to and create a new
93:04
instance of
93:05
mongoose scheme so i'm gonna say here
93:08
new
93:09
mongoose scheme scheme
93:12
allows you to define a shape and content
93:14
of the document
93:16
so here we have mongo's scheme and in
93:18
the parentheses
93:20
in the curly braces i'm going to specify
93:22
shape of the document
93:24
so here i'm going to first specify name
93:27
and specify curly braces and inside it
93:30
i'm going to specify type
93:32
which is a string then i'm gonna specify
93:35
required
93:37
to just start that specify comma here
93:41
email email is going to be of the type
93:45
string then require is going to be
93:49
true and unique is going to be true
93:53
the email should be unique of all the
93:55
users
93:56
then i'm going to say here gender gender
94:00
is going to be string
94:02
and status is going to be
94:05
string so this is a very simple scheme
94:08
of mongodb
94:09
or you can say this is a very simple
94:12
mongodb
94:13
model just have that down here
94:16
i'm going to say constant user
94:19
db is equal to mongo's
94:23
dot module i'm going to call a method of
94:25
mongoose
94:27
model and inside this model i'm going to
94:29
specify the document name
94:31
so here i'm gonna say userdb so you can
94:33
specify any name to this document
94:35
i'm gonna specify document name userdb
94:38
and then specify shape of the document
94:40
so as you know i have this scheme
94:42
variable
94:43
and this is the shape of my document so
94:46
i'm going to pass here
94:47
scheme to start that don't forget to
94:49
export this model
94:51
so here i'm going to say module dot
94:53
exports
94:54
is equal to usertv so once the model is
94:57
successfully created
94:59
let me just create the controller of
95:01
this website using controller i'm going
95:03
to just make select update
95:05
delete and create records so what i'm
95:07
going to do is i'm going to click on
95:08
this controller folder
95:09
and create a new file inside it and i'm
95:12
going to name this file
95:14
controller.js if you want you can name
95:16
this file anything
95:18
inside this controller i'm gonna first
95:20
require this module
95:22
so i can use it in this controller file
95:24
so i'm gonna say here bar
95:26
user db is equal to
95:29
answer required and in the single code
95:32
i'm going to specify model and then
95:35
specify model.js file
95:37
so i'm going to just require this scheme
95:39
inside this
95:40
controller file so i can use it inside
95:43
this controller
95:44
just after that here i'm going to create
95:46
my first api create request so here i'm
95:48
going to create and command
95:50
create and save
95:53
new user so i'm going to just create
95:56
here a function
95:57
so here i'm going to say expose dot
96:00
create is equal to specify request and
96:04
response parameter and specify arrow
96:07
function to it
96:08
and here inside this create function i'm
96:10
going to save a new user
96:12
so i'm going to first back to my
96:13
router.js and inside it i'm going to
96:16
first require this
96:17
controller so here i'm going to say
96:18
constant controller
96:21
is equal to and using require i'm gonna
96:24
require the
96:25
controller file controller.js
96:28
just after that just down here i'm gonna
96:31
create
96:32
my api route so here i'm gonna create a
96:34
command
96:35
api so here i'm going to first create
96:38
this
96:39
create request so in the route i'm going
96:41
to say
96:42
route dot post to create
96:46
and add new user i'm going to use post
96:48
method
96:49
so i'm going to call post method in the
96:51
single code
96:52
i'm going to specify forward slash api
96:54
specify forward slash
96:56
and see here users so this is the route
96:58
path of
96:59
post request just out of that i'm going
97:02
to specify comma
97:03
and say controller dot create
97:07
so i'm gonna call this method when the
97:09
route is match
97:10
with this post method save the changes
97:13
back to the controller and inside this
97:16
function i'm gonna save and create a new
97:18
user
97:19
now let me just do the same for update
97:22
delete and find so down here i'm going
97:25
to create a command
97:26
and say redrive and return
97:30
all users or i'm going to use the same
97:34
method to redrive and
97:37
return a single
97:40
user so here i'm going to create a
97:43
function
97:43
so i'm going to say here exports dot
97:46
find
97:47
and specify request and response
97:50
parameter
97:51
so i'm going to use this function to
97:53
retrieve all the user
97:54
as well as i'm going to use the same
97:56
function to retrieve only a single user
97:59
i'm going to show you that later in this
98:00
tutorial just down here
98:03
i'm going to create a new command and
98:05
say
98:06
update a new identified
98:10
user by user id i'm going to update the
98:13
user so i'm going to create here a
98:14
function
98:15
expose dot update is equal to
98:18
call the request and response parameter
98:22
just like this so i'm going to use this
98:24
method to update the user
98:26
and just down here i'm going to create a
98:27
new command
98:29
and here i'm gonna say delete a user
98:33
with specified user id
98:37
in the request so here i'm gonna say
98:39
exports dot
98:41
delete is equal to and call the request
98:44
and
98:45
response parameter with arrow function
98:47
save the changes
98:49
back to the router.js file and here let
98:52
me just duplicate
98:53
this statement like this and instead of
98:57
this post request
98:58
this time i'm going to make get request
99:00
so here i'm going to say get
99:02
and i'm going to make this get request
99:03
on this route
99:05
and i'm going to change this callback
99:08
function so here i'm going to say
99:09
controller
99:10
dot fine so when i make a get request on
99:13
this route i want to execute this
99:15
find method just after that i'm gonna
99:18
just say here route
99:19
dot put i'm gonna just call a put method
99:23
of http
99:24
on this path and then i'm going to just
99:26
pass a parameter
99:28
to this path so here i'm going to
99:29
specify forward slash
99:31
colon id so when i call this boot method
99:36
i need to specify value to this id
99:38
variable
99:39
and now instead of this controller dot
99:40
create i'm gonna say here controller dot
99:44
update so i'm gonna call this update
99:46
method when the route is match
99:48
at the end i'm gonna say route dot
99:50
delete
99:51
i'm gonna call the http delete method
99:54
and i'm going to pass id
99:56
with this delete route so here i'm going
99:57
to say for slash
99:59
colon id just after that i'm going to
100:01
specify callback function
100:03
controller dot delete so this is how we
100:06
can simply create
100:07
an api for this application save the
100:10
changes
100:11
save the controller file as well and
100:13
next i'm going to show you how to create
100:15
these functions and get all the
100:17
information from the database
100:24
now let's understand how to make crude
100:26
operation using mongodb database
100:29
i'm going to first create a new user
100:30
using this create callback function
100:33
so inside this create function i'm going
100:35
to first validate the request
100:37
so here i'm going to create a command
100:38
and say validate
100:40
request so how can i validate the
100:42
request so here i'm going to say
100:44
if exclamation mark request dot body
100:48
if when the request make a post request
100:51
with empty body i want to just send a
100:54
response
100:55
with a status 400
100:58
and then send a message so i'm going to
101:01
say here curly braces and here i'm going
101:03
to say
101:04
message content cannot
101:08
be empty and just return from this
101:12
function so here i'm going to say return
101:15
so if the user
101:16
make post request with empty body i'm
101:18
going to say return from this
101:19
callback function so whenever the user
101:22
make a post request
101:23
you need to specify body of that post
101:25
request
101:26
as you know when you make a post request
101:28
using a form
101:30
all the data of the form is stored in
101:32
the body of
101:33
the request object and using this body
101:36
we can access all the form data
101:37
so down here i'm going to just create a
101:40
new user
101:41
so we need to create a new instance of
101:43
the user td
101:44
scheme so here i'm going to create a
101:46
command and say
101:48
new user so here i'm going to create
101:50
constant
101:51
user is equal to new user db
101:55
and in the parentheses inside the curly
101:58
braces
101:58
i'm going to specify value to this
102:00
document so i'm going to specify it to
102:02
this name
102:03
email gender and status so inside this
102:06
controller
102:06
inside this curly braces i'm going to
102:08
first specify name
102:10
and then here i'm going to say request
102:12
dot body
102:13
dot name so when the user make post
102:16
request
102:17
i can access this name property from the
102:18
body just out of that
102:20
i'm gonna say here email request dot
102:23
body dot email
102:26
just down here i'm going to say gender
102:29
gender is going to be request
102:32
dot body dot gender
102:36
and just after that i'm going to say
102:37
status is going to be request dot body
102:40
dot
102:41
status so as you can notice here the
102:44
data
102:45
is going to match to this model so
102:47
inside this controller i'm going to
102:49
store this data
102:50
and create a new instance of user db
102:53
model
102:54
and store it in this variable just after
102:56
that
102:57
just down here i'm going to save this
102:59
data in the database
103:01
so i'm going to just create a comment
103:02
here and here i'm going to say save
103:04
user in the database
103:07
so i'm going to call here user and here
103:10
i'm going to call different methods so
103:11
i'm going to use
103:12
chaining system to call different
103:14
methods so here i'm going to say dot
103:16
save this method is going to save this
103:18
data in the mongodb database
103:21
and then here to this save method you
103:23
need to pass your
103:24
object so here i'm going to pass this
103:26
user
103:27
i want to save this user data in the
103:30
mongodb database so i'm going to pass
103:31
this user data here
103:33
just start that specified dot and call
103:35
the promise
103:36
then method and inside it i'm going to
103:38
specify data
103:39
and inside this callback function i'm
103:41
going to say response
103:43
dot send and i'm going to send this data
103:47
and if this promise return
103:50
error i'm going to sketch it using this
103:52
catch method
103:54
with error so i'm going to call here a
103:57
callback function
103:58
and say response dot status and then i'm
104:01
going to specify the error status score
104:02
500
104:03
and then send it using curly braces
104:07
and inside it i'm going to say message
104:10
and here i'm going to say
104:11
error dot message
104:14
if this variable return nothing i'm
104:17
going to just specify default value
104:19
some error occurred
104:22
while creating a create
104:26
operation don't forget to specify
104:28
semicolons here
104:30
that's it save the changes and now here
104:34
you have your create
104:35
callback function now let me explain
104:38
this code
104:39
and show you how to execute it so i'm
104:41
gonna first check
104:42
so if the user make post request without
104:44
body i'm gonna just exit from this
104:46
method
104:47
and if we have body of the post i'm
104:49
gonna just get
104:50
all the content and create an instance
104:53
of this model
104:54
so once i have the instance of this
104:55
userdb model i'm going to save it
104:58
inside the database using this save
105:00
method just out of that i'm going to
105:02
call the promise then
105:03
and then return this save data to the
105:06
user
105:06
and if there is any error inside this
105:09
statement i'm going to call this cache
105:11
method
105:12
now let me just test this api so i'm
105:14
going to open the postman api tool
105:16
to test this api it is always the best
105:18
practice to test your api before working
105:21
with it
105:22
so i'm going to open the post man
105:24
postman is a free tool for testing apis
105:26
if you don't know about what is postman
105:28
then you can check my dedicated video on
105:30
it
105:30
postman is api testing tool that help us
105:33
to test the apis
105:35
if you don't have postman in your local
105:36
system just open your browser
105:38
and just head on to postman just search
105:41
for postman
105:42
and head on www.postman.com
105:45
and from this website you can download
105:47
the postman for your local system
105:49
i already have the postman installed in
105:50
my local system so i'm not gonna install
105:52
it again so i'm gonna close my tab and
105:54
open the postman again
105:56
and now i'm gonna just create a new tab
105:57
here and then here you can notice
105:59
i have the request type so we have
106:01
different request type here
106:03
the requested url and the send button so
106:06
as you know if you just back to your
106:08
router.js
106:09
we are going to make a post request on
106:11
this url
106:13
and this is going to call this create
106:15
callback function
106:16
so i'm going to open my postman and
106:18
first select the post request
106:20
then specify the url so as you know if
106:22
you back to your browser
106:24
this is your url of your application
106:27
just copy it and back to the postman and
106:30
specify that url
106:31
right here and just out of that specify
106:34
this
106:34
api path this one and paste it right
106:38
here
106:38
like this and just after that as you
106:40
know we need to specify body
106:42
to this posed method if you just make
106:45
this send request then you will get an
106:46
error message
106:48
because as you can notice here in the
106:49
controller i just added if
106:52
we don't have body to this post request
106:54
i just want to exit from this
106:56
post request so let me just add body of
106:58
this post request so i'm going to click
107:00
on this body
107:01
and here i'm going to select the x www
107:04
form
107:05
url encoded this is the url encoded data
107:08
i want to send
107:09
with this post request and then here i'm
107:11
going to pass
107:12
body to this method so in the key i'm
107:15
going to first specify
107:16
name specify value here so i'm going to
107:18
just specify my
107:19
name to the user which is ashok talwar
107:23
then i'm going to specify email just out
107:25
of that
107:26
i'm going to specify gender gender is
107:28
going to be
107:29
mail and status
107:33
status is going to be in active
107:37
so what i want i want to store this data
107:39
inside my mongodb database
107:41
so i'm going to pass this data to this
107:42
body and just click on this send button
107:44
to add this data in the mongodb database
107:47
but before i click on this
107:48
send button you can notice here if i
107:50
open the controller
107:51
here i have the mongodb scheme inside
107:54
this game i have name
107:56
email gender and status when i make this
107:58
post request
107:59
i'm going to pass this data to these
108:01
variables
108:02
so i can store it in this mongodb
108:04
database
108:05
so let me just click on this send button
108:07
and store this data inside this database
108:10
when i click on it you can notice i'm
108:11
going to have the result something like
108:12
this
108:13
here i have the unique id then we have
108:15
the name
108:16
email gender and status so as you can
108:19
notice we have the successful 200
108:21
message
108:21
from this response so as you can notice
108:24
we successfully inserted the data inside
108:26
the mongolia database
108:27
let me just back to my mongodb database
108:30
so let me first open my cluster and
108:32
click on these collections
108:33
here you can notice inside this
108:35
collection i have my data
108:37
in the collection you can find the
108:39
database name users
108:40
and the document name userdbs so you can
108:43
notice we successfully make the create
108:45
request
108:46
now once you understand how to create a
108:48
user and save the data in mongodb
108:50
let's understand how to find or you can
108:52
say how to get the user using gate
108:58
method
109:00
now let's take a look at how to read the
109:02
data from the mongodb database
109:04
as you can notice i'm using this find
109:06
method to read the data from the
109:08
database so i'm going to use this find
109:09
method
109:10
of this controller file so i'm going to
109:12
open the controller.js and here i have
109:14
this find method
109:16
inside it i'm gonna read the data from
109:18
the database so i'm gonna first get the
109:20
data from the database
109:21
and return as a response here i'm gonna
109:23
first say
109:24
userdb dot fine
109:27
i'm going to call a find method of
109:29
userdb object
109:31
and then i'm going to call a then method
109:32
of promise so here i'm going to say dot
109:35
then and then i'm going to pass
109:36
parameter user and in the callback
109:38
function i'm going to set response.send
109:41
user just like this and then i'm going
109:44
to call the catch method
109:45
to return the error message if there is
109:47
any error inside the statement
109:49
so here i'm going to say response dot
109:52
status
109:53
and status score is going to be 500
109:55
which is the error code
109:56
and then send the message object
109:59
like this so here i'm going to say error
110:02
dot
110:03
message and if this variable
110:06
is not available let me just send the
110:08
default value
110:10
which is error occurred while
110:13
redriving user information
110:16
save the changes open the postman and
110:19
now i'm going to make get request
110:21
on this user route so as you can notice
110:24
i have this
110:24
get request and i'm going to specify
110:27
this url
110:28
so i'm going to open my postman and here
110:30
i'm going to select
110:31
the get request and this guest request
110:34
is posted on api users and then i'm
110:38
going to just back to my patterns
110:39
and just click on this send button when
110:41
i click on it
110:43
as you can notice i'm going to have the
110:44
data of my database
110:46
because we have only one data inside
110:48
this database i'm only going to have
110:50
one record as a response so this find
110:53
method will return
110:54
all the records of the database as a
110:56
response just for that let me show you
110:58
how to update the value
110:59
of the user using this update callback
111:01
function
111:02
so here inside this update method i'm
111:04
going to just first say if
111:07
if the request dot body is not available
111:11
then i'm going to just return a response
111:14
with a status code 400 and then i'm
111:18
going to return
111:18
a send method with message object
111:22
and then i'm going to specify here data
111:24
data
111:25
to update cannot be empty
111:29
and just for that down here if the body
111:31
of the put request
111:33
this put request is empty i will return
111:36
from this callback function
111:37
just like that down here i'm going to
111:39
say constant id
111:41
is equal to request dot
111:45
params dot id so i'm going to just get
111:49
this id value from this request
111:53
using this param object now in express
111:56
there are two type of route parameters
111:58
the url parameters and query parameters
112:01
this is the type of url parameters
112:04
we created a variable in the url so this
112:08
is what we call
112:09
the url parameter when we make port
112:11
request i need to specify value
112:14
to this id parameter so when i specify
112:16
value to this id parameter
112:18
so this value is going to specify to
112:21
this id variable
112:22
using this statement so when i make a
112:24
request with
112:25
id value the value is going to pass
112:28
through this parameter object
112:29
and to this id variable so i can get
112:32
that value
112:33
and store it in this id variable the
112:35
second type of parameter is query
112:37
parameters
112:38
i will show you how to work with query
112:40
parameters after a few minutes but just
112:42
for now
112:42
once i have the url parameter inside
112:44
this id just down here i'm going to say
112:47
userdb dot find by
112:52
id and update i'm going to call this
112:54
method
112:55
find by id and update and inside this
112:58
method
112:58
i'm gonna first specify the id which i
113:00
want to update
113:01
so i'm gonna specify here id i'm gonna
113:04
pass this
113:04
variable then specify here comma
113:08
and then i'm gonna pass request dot body
113:11
i'm going to pass the data which i want
113:13
to update and then here i'm going to
113:15
pass
113:15
curly braces and say use find and modify
113:19
false just start that down here i'm
113:22
going to call
113:22
promises so here i'm going to say then
113:25
and inside this
113:26
then i'm going to pass parameter data
113:28
and i'm going to say here
113:30
if we don't have data then i'm going to
113:33
just return a response
113:35
dot status 404
113:38
and then i'm going to send a response so
113:40
here i'm going to send
113:42
in the curly braces i'm going to call a
113:44
message key
113:45
and in the backtick operator i'm going
113:46
to say cannot update
113:48
user with then specify the id
113:51
and then i'm going to say dot maybe user
113:55
not found just after that just out of
113:58
this if statement
113:59
i'm going to say here else if we have
114:01
this data parameter
114:02
i'm going to say here response dot send
114:05
and send this data
114:06
i'm going to just send this updated data
114:08
with this statement
114:10
just down here if there is any error in
114:12
this then method
114:13
i'm going to just catch it so down here
114:15
i'm going to say catch
114:17
error call the function
114:20
and here i'm going to say response dot
114:22
status
114:23
status is going to be 500 and then i'm
114:26
going to call
114:27
send method with message key
114:31
and here i'm going to say error update
114:34
user information save the changes
114:38
so once i have my update callback
114:40
function let me just check it
114:43
so as you can notice here in the router
114:45
i have this put request
114:46
so i want to make this put request on
114:48
this route
114:49
when i make this put request i need to
114:51
specify value to this id parameter so i
114:53
can get it
114:54
inside this id variable and pass to this
114:58
object so i'm going to just open the
115:00
postman and here i'm going to first
115:02
get this id so i'm going to copy this id
115:06
and i'm going to select put request this
115:08
one
115:09
just out of that i'm going to make a
115:11
request on api users
115:13
and as you know in the router i have
115:15
this id parameter
115:17
so i need to pass value to it so here
115:20
i'm going to specify
115:22
forward slash and paste this id
115:25
just after that i'm going back to the
115:27
body of this request
115:28
and now i want to update this status of
115:31
this user so i'm going to uncheck
115:32
gender email and name and i'm going to
115:36
just say here
115:37
inactive and i'm going to make this
115:40
active
115:41
now once i specify body once i specify
115:44
the parameter value let me just make
115:46
this put request
115:48
so i'm gonna just select the id using
115:50
this id parameter
115:52
and update the status of the id and make
115:54
it active
115:55
right now the status of the user is
115:58
inactive
115:58
i'm gonna make it active and update the
116:00
value of this status property
116:02
so i'm gonna just click on this send
116:04
button to update
116:05
this status property when i click on the
116:08
send button as you can notice
116:09
i'm gonna have the status active so the
116:12
postman will make put request on this
116:14
route
116:15
with this id and update the status
116:17
property to active
116:18
so this is how you can update the value
116:20
in the mongodb database now just after
116:22
that
116:22
let me show you how to delete the record
116:24
from the database
116:30
now deleting records from the user
116:32
database is super easy
116:34
inside this delete callback function i'm
116:37
gonna first get the user id
116:38
so here i'm gonna say constant id is
116:41
equal to request.params.id
116:44
so i'm going to get the user id using
116:47
this variable
116:48
so when i make a delete request i need
116:50
to specify id
116:51
of the user just out of that here
116:54
i'm gonna say userdb dot
116:58
find by id
117:01
and delete i'm gonna call this method
117:04
and pass
117:05
id as a parameter to this method this
117:07
method is going to return promise so i'm
117:09
going to get that
117:10
promise using dot den method and specify
117:13
here parameter data
117:15
and see here if we don't have
117:18
data then i'm going to say response dot
117:20
status
117:21
and say 4 0 4 then i'm going to say here
117:24
send and in the curly braces i'm going
117:26
to return the error message
117:28
so i'm going to say here message and say
117:30
cannot
117:32
delete with id and then i'm going to
117:34
pass here id variable
117:36
and say here maybe id is
117:40
wrong just sort of that if we have valid
117:43
data
117:44
then i'm going to say here else
117:45
statement and inside this else i'm going
117:47
to say response dot send
117:49
and then i'm going to send a message so
117:50
here i'm going to say message and say
117:53
user was deleted
117:56
successfully at the end just after that
117:59
just down here if this then method
118:02
return any error
118:04
i'm going to catch that using this catch
118:06
method and say here error
118:08
and here i'm going to say response dot
118:10
status and specify 500
118:13
as a status code and send error message
118:16
in the curly braces
118:17
i'm going to say message could not
118:20
delete
118:22
user with id is equal to
118:26
and then i'm going to concatenate the id
118:28
variable
118:29
like this if you want you can use your
118:32
backtick operator as well to print this
118:34
value
118:34
that doesn't matter just start that i'm
118:37
gonna specify here semicolons
118:40
like this and save the changes
118:44
save this file as well and now if you
118:47
want to delete the data
118:48
from the mongodb database you need to
118:50
call the delete http method
118:51
with this url so what i'm going to do is
118:54
i'm going to first open the postman
118:56
and let me first add a new value inside
118:58
a database
118:59
so i'm going to make a post request and
119:02
just specify here
119:03
api users and then in the body i'm gonna
119:07
pass
119:07
name email and gender inside name
119:11
i'm gonna specify user1 and in the email
119:14
i'm going to specify user at the date
119:18
gmail.com here i'm going to specify
119:20
gender
119:21
which is female and status
119:25
is going to be active so now i'm going
119:28
to just pass this data to the post
119:29
request and create a new record inside
119:31
my mongodb database
119:32
i'm gonna click on this send button to
119:34
create a new record so this will just
119:36
create this record inside mongodb
119:37
database
119:38
so let me first back to my mongodb
119:40
database and refresh it
119:41
when i refresh my collections here i
119:44
have two database records
119:46
this is my first record and this is the
119:47
second one i'm gonna delete this second
119:49
record
119:50
so i'm gonna open the postman and now
119:52
i'm gonna copy this id
119:53
and just out of that i'm gonna just
119:55
click on this post
119:57
and select the delete method and here
119:59
inside this url i'm gonna pass
120:02
value to the id variable so i'm gonna
120:04
specify forward slash
120:05
then specify id this one in the url
120:09
and then back to the params and now i'm
120:11
gonna click on this send button to
120:12
delete this record
120:14
from the mongodb database as you know
120:16
when i make a request
120:17
this id is going to pass to this
120:20
variable
120:21
and pass through this object and then
120:23
this statement
120:24
will delete this record from mongodb
120:26
database now let me just make this
120:27
request
120:28
so i'm gonna click on this send button
120:30
when i click on it i'm gonna have a
120:32
message
120:32
user was deleted now let me just check
120:35
my database
120:36
so let me refresh it as you can notice
120:38
the second record is now deleted from my
120:40
database
120:41
so you can see how easy it is to delete
120:44
the record from your mongodb database
120:46
now once you understand how to work with
120:47
create update
120:49
and delete and how to find all the users
120:52
from the database
120:53
let me just show you how to get and
120:55
retrieve a single user
120:57
from the database when you make a get
120:58
request on this route
121:00
this will return all the users but what
121:02
i want i want to retrieve
121:04
a specific user from the database
121:06
instead of returning all the users i
121:08
want to return only a single user
121:10
from the database
121:16
now to retrieve the single user from the
121:19
database i'm gonna use
121:20
this same find method if you want you
121:23
can create a new function
121:25
to retrieve the single user from the
121:26
database when you create a new function
121:28
you need to create a new route for that
121:31
so instead of creating a new route i'm
121:33
going to just use this
121:34
same route to get the single user and
121:36
multiple users
121:37
so inside this find method i'm going to
121:40
just get
121:40
the query parameters and get a single
121:42
user from the database
121:44
so let me first add a few users inside
121:46
my database
121:47
as you know i only have a single record
121:50
inside my database you can notice here
121:53
so let me first r if you record
121:55
inside this database using post method
121:58
so i'm going to just make some post
121:59
request
122:00
and add some users inside this database
122:03
so let me first refresh my database
122:06
as you can notice i have a few records
122:08
inside this database
122:09
let me show you all my database records
122:11
so here i'm going to say get
122:13
and i'm going to just make get request
122:14
to this api users
122:16
and i'm going to just make a request you
122:19
can notice here
122:20
this will just return all the records of
122:22
my database
122:24
but what i want i want to just get a
122:26
specific record from this database
122:29
so what i'm going to do is i'm going to
122:30
just back to my find method
122:32
and here i'm gonna just pass query
122:34
parameter when i make get request
122:36
to this route so when i make a get
122:39
request
122:39
to this route i'm gonna just return a
122:42
query parameter
122:43
and then i'm gonna get that query
122:44
parameter and pass inside this callback
122:47
function and get a specific user
122:49
so up here i'm gonna say if
122:53
request dot query dot id
122:57
if i have this id parameter of the query
123:00
then i'm gonna return the specific user
123:03
otherwise i'm gonna return all the users
123:06
so in the else statement i'm gonna put
123:08
this code like this
123:10
inside this if statement if i have query
123:14
parameter to this request i'm going to
123:16
just get that query parameter so here
123:18
i'm going to say
123:19
constant id is equal to request dot
123:23
query dot id
123:24
and store it in the id variable and here
123:27
i'm going to say user db
123:29
dot find by id and pass this id variable
123:33
here
123:34
just out of that i'm going to call
123:35
promise then method
123:37
pass data variable and here i'm going to
123:40
say if
123:41
i don't have any data
123:44
then return a response with status
123:47
404 and i'm going to just send a
123:50
response so i'm going to say here send
123:52
in the currently process i'm going to
123:54
say message and in the double quote i'm
123:56
going to say not
123:58
found user with id
124:01
and then specify the id variable just
124:03
down here
124:04
in the else statement i'm going to
124:06
simply say response dot send
124:08
and send this data and if this statement
124:12
return
124:12
an error message i'm going to sketch it
124:14
so here i'm going to say catch
124:16
error and say here response dot
124:19
status return the 500 status code
124:23
dot send and in the curly braces i'm
124:26
going to say message
124:27
and return the error message so here i'm
124:29
going to say error
124:30
redriving user with id
124:34
and then i'm going to concatenate my id
124:36
like this save the changes
124:39
and now open the postman as you know
124:41
when you make a get request to this url
124:44
this will return all the users i want to
124:46
get a specific user from these records
124:49
so for example if i want to get this
124:50
record i'm going to just copy this id
124:53
and in the params i'm going to create a
124:55
key and pass this value here
124:57
like this so you can notice here how
125:00
this url
125:01
look like now i'm going to just create
125:02
here key and value pair
125:04
so this is the key id and this is the
125:07
value of this id key
125:08
i'm going to access this id using this
125:11
query id
125:12
statement and i'm going to store the
125:14
value of this id inside this ide
125:16
variable and i'm going to pass this
125:18
value to this find by
125:20
id method so when i click on this send
125:22
button
125:24
i'm gonna have the specific record as
125:26
you can notice here
125:27
this will just send me a specific record
125:30
from my database
125:31
and now if i remove this ide from this
125:34
url
125:35
you can get all your records this is how
125:38
we can retrieve all the users
125:40
and retrieve a single statement from the
125:42
mongodb database
125:44
now you can see we successfully created
125:46
the api
125:47
of this application and we also tested
125:49
this api on postman
125:51
testing tool so once the api is ready
125:54
let me show you how to use it and
125:56
display all the record of the mongodb
125:58
database
125:59
in the browser so next i'm going to show
126:01
you how to use this api and display all
126:02
the record of the mongodb database
126:04
in the browser
126:11
now once you understand how to create
126:13
api using
126:14
express let me show you how to work with
126:16
it so as you can notice
126:18
in the crude application we only have
126:20
one record inside this
126:21
table so what i'm going to do is i'm
126:24
going to get all the records from my
126:25
database and display them
126:27
inside this table so i'm going to just
126:29
back to my project and open the
126:30
render.js file
126:32
and inside this file as you know we have
126:34
this render method
126:36
to render this index file but here
126:38
instead
126:39
of rendering just an index file i'm
126:41
going to just pass
126:42
data with this render method so i can
126:45
access it
126:46
in the index file so i'm gonna specify
126:48
here comma
126:49
and in the curly braces i'm gonna say
126:51
users
126:52
and specify data so here i'm gonna say
126:55
new
126:56
data i'm going to pass value to this
126:58
user key
126:59
save the changes and now i can access
127:02
this variable
127:03
inside my index file so i'm going to
127:06
just open my views
127:07
and here in this index.hs i can just
127:10
access this variable this variable users
127:14
so i'm going to just back to the
127:15
index.hs and
127:17
just out of this form i'm going to add
127:19
each syntax
127:21
and get rid of this statement right from
127:23
here
127:24
specify equal to sign and say users
127:28
save the changes reload the browser and
127:31
as you can notice i'm going to have my
127:32
data here
127:33
so now what we are going to do is i'm
127:35
going to get all the data from the
127:36
homegroup database and pass that
127:38
to this user so i can access it and
127:40
display all the records of my mongodb
127:42
database
127:43
in the index file so inside this home
127:45
route
127:46
i'm going to make the get request so up
127:49
here
127:49
i'm going to just say constant exist
127:53
i'm going to just require exious module
127:56
and this module is going to allow us to
127:58
make a request
127:59
just start that inside this home route
128:02
right here
128:03
i'm going to just make a get request
128:06
to the api users
128:10
right so here i'm going to say exious
128:14
dot get i'm going to call get request of
128:17
xcos
128:18
library just after that in the single
128:20
code i'm going to pass the url
128:21
of the api users so i'm going to just
128:24
copy this url
128:25
paste it here and then i'm going to
128:27
specify api
128:29
users so i'm going to make a get request
128:32
and call this get route
128:33
this get request is going to return
128:35
promise so i'm going to get that promise
128:37
using
128:38
then method and here i'm going to say
128:41
function
128:42
response so i'm going to send a response
128:45
here
128:46
so i'm going to just grab the statement
128:48
paste it here
128:50
and instead of this user new data i'm
128:53
gonna pass here
128:54
response dot data
128:57
so inside this response i have a data
129:00
property
129:01
and inside this data property i have all
129:03
the records of my mongodb database
129:05
let me show you if i say here
129:06
console.log and specify here response
129:10
save the changes don't forget to call
129:12
the
129:13
cache method i'm going to say here catch
129:16
then i'm gonna call the callback
129:18
function like this
129:20
and here i'm gonna say response.send and
129:23
then send the error
129:24
save the changes reload the browser and
129:27
as you can notice i'm gonna have
129:29
object as a response and when you open
129:31
your terminal
129:33
you have your response in the console
129:36
so this object this response object will
129:38
going to return
129:39
the result something like this inside
129:41
this object you have different
129:42
properties
129:43
you can access all these properties from
129:45
this object this is a type of get
129:47
request
129:48
so you can access this method property
129:50
as well
129:51
and you can access this data property as
129:53
well inside this data property you have
129:55
all the response so i'm going to just
129:58
access
129:59
this data property so here i'm going to
130:02
say response dot
130:03
data save the changes and reload the
130:06
browser
130:06
as you can notice i'm going to have my
130:08
data as a response
130:10
so once i have my response let me just
130:12
get rid of this console
130:14
from here and it trade over this
130:17
object inside this index dot egs file
130:20
so what i'm going to do is i'm going to
130:22
close this terminal back to the
130:24
index.ejs
130:25
and instead of display these users here
130:29
i'm going to iterate over these users so
130:32
as you know
130:32
i have all the user data inside this
130:34
show partial file
130:36
so i'm going to get it out of this
130:37
statement like this
130:39
save this file and open the show dot egs
130:42
file
130:43
from this include folder this one and
130:46
then
130:47
here before this table row i'm gonna add
130:50
ej syntax like this and here i'm gonna
130:54
say
130:55
for where i
130:58
is equal to 0 i'm going to start the
131:00
iteration from 0
131:02
and see here if i is less than
131:06
users dot length
131:10
if the i variable is less than user dot
131:12
length
131:13
i'm going to just increase the value of
131:15
i variable using incremental
131:17
operator just after that i'm going to
131:19
start this iteration
131:21
so i'm going to specify opening curly
131:22
braces and
131:24
don't forget to close this curly braces
131:26
down here
131:27
so i'm going to just add here ejs syntax
131:30
like this and close this for loop
131:34
and instead of these hard-coded values
131:37
i'm going to get rid of these hardcoded
131:39
values and print variables
131:41
so i'm going to call each syntax with
131:43
equal to sign to print value
131:45
and then i'm going to first specify id
131:48
so here i'm going to say
131:48
i right now this i has value 0
131:52
but i don't want to start my id from 0
131:54
so i'm going to say here i
131:56
plus 1 just after that i'm gonna copy
131:59
this
131:59
syntax paste it here and instead of i
132:03
plus 1
132:04
i'm going to specify users of i
132:07
and then i'm going to specify dot name
132:10
i'm going to just get the records
132:12
and call the name property from the
132:14
records
132:15
then i'm going to copy this statement
132:17
paste it
132:18
right here and this time i'm going to
132:21
get emails
132:22
then i'm going to just get gender
132:26
and this will return status save the
132:29
changes
132:30
back to the project and reload it as you
132:33
can notice
132:34
when i reload the project i'm going to
132:35
have all the values
132:37
of my mongodb database so this will just
132:39
return all the mongodb database value
132:42
as a response now once you understand
132:44
how to get all the records from the
132:46
mongodb database let me show you how to
132:48
create a new user
132:50
from this add user form
132:56
now we all know how to add a user using
132:59
api
133:00
now let's take a look at how to add the
133:02
user using new user form
133:04
so i'm going to just pass values to
133:06
these input text boxes
133:08
and create a new user and store the data
133:10
in the mongodb database
133:11
so let me show you how to do it so i'm
133:13
going to open my editor
133:15
and then i'm going to open the add
133:16
user.egs file
133:18
let me just close these files as you
133:20
know using this method
133:22
using this add user i'm going to just
133:24
redirect the user
133:25
to the services our user and as you know
133:28
when the route
133:29
is matched to add user i'm gonna render
133:32
this
133:32
add user.egs file and in this file
133:35
i have the add user form let me just
133:38
open this form
133:39
so i have this form in the partial file
133:41
of form.egs
133:43
going to open it and here you can notice
133:46
i have this add user form
133:48
so let me just pass action attribute to
133:50
this form
133:51
so to this form i'm going to say action
133:55
and in the action attribute i'm gonna
133:57
pass
133:58
this post request url this one
134:02
so i'm gonna copy this route and pass
134:05
right here
134:06
like this save the changes so what it
134:09
does
134:10
when we click on the submit button it's
134:12
going to pass this post request
134:14
to this route so when the post route is
134:16
matched
134:17
it's going to store all the data of this
134:19
form in the mobile device database
134:21
so what i want when i click on this
134:23
submit button of this form
134:25
i want to redirect the user to this url
134:29
and as you know on this url i have this
134:32
post route
134:33
so i'm going to just execute this post
134:34
route and create and store
134:36
this data in the mongodb database and
134:39
then i'm going to redirect the user
134:40
back to the add users so if you just
134:42
open the controller
134:44
dot js file you can notice inside this
134:47
create
134:48
i'm going to return the data as a
134:50
response
134:51
but now let me just redirect the user to
134:54
the specific page
134:55
so let me show you how to do it here i'm
134:57
going to say response
134:59
dot redirect and using this method i'm
135:02
going to redirect the user
135:03
to different url so inside this single
135:06
code
135:06
i'm going to specify the path forward
135:09
slash
135:10
add user back to my browser and you can
135:13
notice here i'm going to just specify
135:14
this path
135:15
to this redirect method so when i click
135:17
on the submit button
135:18
i'm going to store all this data in the
135:20
mongodb database and redirect the user
135:22
to this form again if you want you can
135:25
redirect the user to other pages as well
135:27
that's upon you
135:28
now once i've done that let me just add
135:30
a simple message that the data is
135:31
successfully inserted
135:33
so i'm going to open a new tab and add a
135:34
jquery inside this project
135:36
so i'm going to say here jquery cdn
135:39
js i'm going to open cdnjs.com
135:43
and from this website i'm going to copy
135:44
the jquery cdn
135:46
right from here and then i'm going to
135:48
just paste it
135:49
before the closing body tag so down here
135:52
we have this footer partial file i'm
135:54
going to open it
135:55
and before this closing body up here
135:58
i'm going to paste this jquery like this
136:01
and then i'm going to create my custom
136:02
javascript file
136:04
and link that here so let me just
136:06
minimize the server
136:08
inside this asset inside this js folder
136:10
i'm going to create
136:12
index.js file this is my custom
136:14
javascript file
136:15
i'm going to first link this so inside
136:17
this footer i'm going to say script
136:19
then here i'm going to specify forward
136:21
slash js
136:23
index dot js i don't have to specify the
136:26
relative path of this file
136:28
because in the server.js i have the
136:30
virtual path
136:31
js to add js file inside this project so
136:34
i don't need to specify any
136:36
relative path inside the source
136:37
attribute let me just save the changes
136:39
back to the index.js which is my custom
136:42
javascript file
136:43
when i click on the submit button i want
136:45
to alert a message
136:47
so here i'm going to just say dollar and
136:49
in the parenthesis
136:50
i'm going to just specify hash add
136:54
user so i'm going to specify this id add
136:56
user
136:57
of this form inside this index.js
137:00
when i click on the submit button so i'm
137:02
going to call here submit
137:04
event when i click on the submit button
137:06
of the form i want to call this
137:08
function so here i'm going to say
137:09
function event
137:12
and inside this function i'm going to
137:14
say alert
137:15
and in the double quote i'm going to say
137:17
data
137:18
inserted successfully save the changes
137:22
and back to the browser let me close
137:24
this down
137:25
back to the crude application and reload
137:28
it now
137:29
let me create a new user so here i'm
137:31
going to just specify name of the user
137:33
and the email of the user then i'm going
137:36
to specify gender
137:38
female and status inactive
137:41
now when i click on this save button
137:43
this data
137:44
will save in the mongodb database and
137:47
you will get a message
137:48
data successfully inserted when i click
137:50
on this save button
137:52
you can notice you will have a message
137:53
data inserted successfully
137:55
when i press ok this will reload the
137:57
browser
137:58
and when you back to your root route you
138:00
will have your data
138:02
you have six records in your database so
138:05
now once you understand how to
138:06
successfully add a user
138:08
inside your database let me show you how
138:10
to update the user
138:17
now once you understand how to add a new
138:18
user inside mongodb database
138:21
using new user form let me show you how
138:23
to update the record
138:24
of the mongodb database so as you know i
138:27
already have
138:28
update form in this project so when i
138:30
click on this edit button
138:32
this will open the update user form here
138:35
using this form i'm going to update the
138:36
user but when i click on this edit
138:38
button
138:39
i want to get all this information of
138:41
the current user
138:43
and display them inside these text boxes
138:46
as well as inside these radio buttons so
138:48
how can i do it
138:50
let me show you how to get the user data
138:52
inside these text boxes
138:54
and update it so i'm going to just back
138:55
to my editor and i'm going to open
138:58
the render.js file to this update user
139:01
i'm going to surrender this update user
139:03
template but
139:04
instead of just returning the update
139:06
user i'm going to return the data as
139:08
well
139:09
with this render method i'm going to
139:10
just make a request so here i'm going to
139:12
say
139:13
exeos dot get and i'm going to make a
139:16
get request
139:17
and here i'm going to call this url
139:19
paste it inside these parentheses in the
139:21
single code
139:22
and then specify curly braces and inside
139:25
it i'm going to say
139:26
params colon in the curly braces i'm
139:30
going to say
139:30
id and say here request dot
139:34
query dot id now
139:37
i'm going to pass this option because i
139:39
want to get a specific user
139:41
from the database here you can notice
139:44
when i make this request
139:45
this request will return all the data
139:48
from the database
139:49
but at this time i just wanted to get
139:52
the specific user
139:53
from the database instead of returning
139:55
all the user
139:56
so i'm going to pass here params with a
139:59
query
140:00
id just out of this query down here
140:03
i'm gonna call then method inside it i'm
140:06
gonna call a function
140:07
with data parameter and here i'm gonna
140:10
say
140:10
response dot render and i'm gonna render
140:14
this update user
140:17
ejs template but this time
140:20
i'm gonna pass the user data as well so
140:23
here i'm gonna say user
140:25
data dot data let me just change this
140:28
name
140:29
to user data i'm going to see here user
140:33
data let me just change this as well
140:35
user data so i'm going to get the
140:37
specific user data
140:39
and pass it to this user object so once
140:42
i have the user
140:43
i'm going to specify that data inside
140:45
input text boxes
140:47
so let me just get it out the statement
140:49
and call the catch method
140:51
so here i'm going to say cache enter and
140:54
just say response dot send enter
140:57
save the changes and now what you need
141:00
to do is
141:00
when you open this url in the browser
141:03
you need to pass value to this id
141:05
variable so as you know when you open
141:07
this update user you don't have this id
141:09
variable here
141:10
so what i'm going to do is when i click
141:12
on this user
141:13
i'm going to pass id with the url if you
141:15
just inspect this window
141:17
then you can notice right here i just
141:20
have the hdf attribute update user
141:22
i want to add id with value because
141:26
i just requested the query with id
141:28
variable
141:30
so when i make a request on this url i
141:32
need to pass id
141:34
as a key and value pair so i'm going to
141:35
just back to the show.ejs file
141:38
and here you can notice i just have here
141:40
update user
141:42
so instead of just update user i'm going
141:44
to pass id
141:45
with this url so here i'm going to just
141:47
specify
141:48
question mark and then call id
141:51
is equal to and then pass the id of the
141:54
user
141:55
so here i'm going to just call this
141:57
syntax
141:58
and instead of user status i'm going to
142:01
call
142:01
id save the changes when i delete the
142:04
browser
142:05
you will see the hdf attribute is
142:07
updated with the user id
142:10
i have the user id in the url if i hover
142:12
over
142:13
to this user i have the id of this user
142:16
as well
142:17
so in the url i'm gonna pass the user id
142:20
so when i click on this update
142:22
i'm gonna have all the data of the user
142:25
on the update page
142:26
but right now i did not specify the user
142:29
data
142:30
inside this user form right here i have
142:32
the empty value inside this
142:34
value attribute so what we are going to
142:36
do is so when i click on this edit
142:38
button
142:39
i'm going to just open this current user
142:42
with id variable i'm going to pass that
142:44
id variable
142:45
to this parameter so this parameter will
142:48
make a request
142:49
to this url and get a specific record
142:52
from the database
142:53
then i'm going to get that specific
142:55
record and pass that with this user
142:57
variable
142:57
so i can access it in this update user
143:00
file
143:01
so let me just access this variable so
143:03
let me just open the update user
143:05
so at the first input text box inside
143:07
this value
143:09
i'm going to simply call ej syntax like
143:12
this
143:12
with equal sign to print a value and
143:15
then say here
143:16
user dot name i'm gonna just get the
143:19
user
143:20
name inside this input text box i'm
143:22
gonna just access this user
143:24
from this user variable and just get the
143:26
name id
143:28
just for that i'm gonna copy this syntax
143:30
paste it up here
143:32
to get the user id here i'm going to
143:34
specify underscore
143:36
id you just start that i need to specify
143:40
email
143:40
so i'm going to paste the egs syntax
143:42
again here i'm going to say email
143:45
i'm not going to do the same with this
143:46
radio buttons because
143:48
the radio button don't have value
143:50
attribute
143:51
because the radio button has check event
143:54
so right here i'm going to paste my egs
143:55
syntax
143:56
like this and here i'm going to call the
143:58
if ternary operator so i'm going to say
144:00
here user
144:01
dot gender if it is
144:04
equal to miu then
144:08
i'm going to return checked otherwise
144:11
return nothing that's it let me just
144:14
copy this
144:15
each syntax paste it here and here i'm
144:18
gonna do the same
144:20
but this time i'm gonna change this
144:21
value with female
144:24
i'm gonna copy this statement paste it
144:27
to this status radio button as well and
144:30
this time i'm going to change this user
144:32
dot status and i'm going to change the
144:36
value
144:37
to active copy the syntax
144:42
paste it down here change this
144:45
active to inactive
144:48
save the changes and reload it now let
144:51
me click on this edit button and show
144:53
you the magic
144:54
let me click on this third user when i
144:56
click on it
144:58
as you can notice i have all the data of
145:00
the user inside
145:01
these text boxes as well as you will get
145:04
this checked radio buttons that's super
145:07
easy right
145:08
when i click on this save button i want
145:10
to submit
145:11
this form and update all these values if
145:14
you just open the
145:16
updateuser.ejs then you can notice here
145:18
i don't have any action attribute to
145:21
this form
145:22
i'm not going to specify here any action
145:23
attribute because i don't want to
145:25
redirect the user anywhere else
145:27
so i'm going to save this file as it is
145:29
close it i'm going back to my
145:31
index.js and here i'm going to just
145:34
access my update form
145:35
so i'm going to say here dollar in the
145:38
parentheses
145:39
i'm going to call hash update
145:42
user you can notice here in the update
145:45
user i have this id
145:47
update user i'm going to access this
145:48
form using this id so i'm going to say
145:50
here update user
145:52
dot submit so when i click on the submit
145:55
button of this
145:56
form i want to execute this function
145:59
with event parameter just for that i'm
146:02
gonna say here event
146:03
dot prevent default
146:07
i'm going to change the default behavior
146:09
of this form as you know the default
146:11
behavior of the form
146:12
is to render the browser when you click
146:14
on the submit button but this statement
146:16
will stop that default behavior just
146:19
after that
146:20
here i'm gonna get all the data from the
146:22
submitted form
146:24
where on indexed addy
146:27
and then i'm gonna call dollar in the
146:29
double quote
146:30
i'm gonna specify user
146:34
or you can pass here this
146:38
both are identical just sort of that i'm
146:40
going to say here
146:41
dot and call a method serialize
146:45
array this method is going to return a
146:48
serialized
146:48
array of the data so when you click on
146:51
the submit button
146:52
i'm going to get all the submitted data
146:54
inside this variable
146:55
let me show you so down here i'm going
146:57
to say console.log
147:00
and say unindexed array let me just save
147:03
the changes
147:04
back to the browser and reload it now
147:06
let me click on this submit button
147:08
but before i click on the submit button
147:09
let me open the inspecto
147:11
and open the console now when i click on
147:13
the submit button you will have the
147:14
result something like this
147:16
this will return the name id and value
147:18
of this id variable
147:20
what i want i want to make this id as a
147:22
key
147:23
of this value so i can pass this array
147:26
to the put request
147:27
and update the current user let me show
147:29
you what i want to say
147:30
so just out of this statement right here
147:33
i'm going to call the map method so here
147:34
i'm going to call dollar
147:36
map and as a first argument i'm going to
147:38
pass my array
147:39
on index array and then call a function
147:43
here i'm going to say n n and i so the
147:46
first argument
147:47
will return all the data from this array
147:51
and this i will return the index from
147:53
this array inside this map i'm going to
147:55
create my
147:55
new array so up here i'm going to say
147:59
var data is equal to
148:02
and then pass here object so inside this
148:05
map
148:05
i'm going to say data i'm going to call
148:08
this variable
148:09
data and in the square bracket i'm going
148:11
to say n
148:12
specific square bracket in the single
148:15
quote
148:15
i'm going to say name then just start
148:18
that i'm going to specify here equal to
148:20
sign
148:20
and say n in the square bracket i'm
148:23
going to say
148:24
value let me just print this data
148:27
on the console save the changes and load
148:29
the browser
148:30
let me click on this save button as you
148:32
can notice i'm gonna have the result
148:34
what i want
148:35
then i have email and its value so now i
148:37
can pass this data to the put request
148:40
and update this record just after this
148:42
console.log
148:44
down here i'm going to create a variable
148:46
request you can specify any name to this
148:48
variable that doesn't matter
148:49
and here i'm going to pass an object
148:52
inside this object i'm going to pass
148:55
value
148:56
to the ajax i'm going to use ajax to
148:58
make a request
148:59
to the server and get the response from
149:01
the server so i'm going to specify here
149:03
key
149:04
url and in the backtick operator i'm
149:07
going to pass url
149:08
let's copy this url right from here
149:13
and paste it inside this url section so
149:15
here i'm going to say http localhost
149:17
3000
149:18
update and i'm going to get rid of this
149:21
update user
149:22
and call my route which is api users
149:27
and here i'm gonna say api slash
149:30
users i'm gonna just make put request
149:33
with id
149:33
so i need to specify value to this id
149:35
variable when i make a request
149:37
so here i'm going to pass forward slash
149:40
dollar
149:40
and in the curly braces i'm going to say
149:43
data
149:44
dot id so as you can notice here inside
149:47
this data
149:48
i have this id variable this one so i
149:51
can access this id
149:52
using this id key and i'm going to just
149:54
pass this value with this url
149:57
just sort of that i'm going to specify
149:58
comma here then specify the
150:01
type of method method is a type of
150:04
put and then i'm going to pass a data
150:09
with this request and as you know i have
150:12
data
150:12
inside this data variable i'm going to
150:14
pass this updated data
150:16
to sort start that let me just make this
150:18
request so here i'm going to call
150:20
dollar dot ajax
150:24
using jquery ajax i'm going to make this
150:26
request
150:27
and i'm going to pass here request
150:29
variable
150:30
and then if we have the successful
150:32
request
150:33
i'm gonna just execute this done method
150:36
and this will just call this callback
150:38
function
150:39
with response i'm not gonna print any
150:42
response here instead i'm gonna just say
150:43
here alert
150:45
with the message data updated
150:49
successfully save the changes and reload
150:52
it
150:53
and now let me update this data so i'm
150:56
going to just update this gender
150:58
and the status of this user i'm going to
151:00
change it to
151:01
mail and i'm going to specify status
151:03
inactive
151:04
when i click on the save button i'm
151:06
going to have the alert message and
151:08
this form will update this current user
151:10
data when i click on the save button
151:12
as you can notice i'm going to have here
151:14
data updated successfully message
151:17
and when you reload the browser you can
151:19
notice
151:20
this data is now updated let me change
151:23
this email
151:24
i'm going to just change this email and
151:26
here i'm going to say
151:29
test.com i want to update this email so
151:31
i'm going to say here test.com
151:33
and click on this save button when i
151:35
click on it i'm going to have a message
151:37
data updated successfully when i press
151:39
ok
151:40
and reload the browser you can notice
151:42
the data is now updated
151:44
and when i'm back to my root route here
151:46
you can notice
151:47
i have this updated data test.com
151:51
now we know that how to create a new
151:52
user how to get all the records from the
151:55
mongodb database
151:56
and we also know how to update the user
151:58
using this edit button
152:00
the last thing we need is to understand
152:02
how to delete the user
152:03
from the database so next i'm going to
152:05
show you how to delete the data
152:07
from the mongodb database using this
152:08
delete button
152:14
now let's understand how to delete a
152:16
specific record
152:18
from this database so as you notice i
152:20
have this delete button
152:21
to delete a specific record so what i
152:24
want when i click on this
152:25
button i want to delete this specific
152:28
record from this database
152:30
and i want to display a message as well
152:32
that the data is successfully deleted
152:34
so let me show you how to do it i'm
152:36
going back to my editor
152:37
and open the show.ejs file
152:41
and here i have this button i'm going to
152:43
use this button to delete this data
152:45
to this button i'm going to pass a data
152:47
attribute and get the user id
152:49
so to this anchor tag up here i'm gonna
152:52
say
152:53
data id is equal to
152:57
and right here i'm gonna pass this
153:00
user id like this so to this data id i
153:05
have this user id
153:06
i'm going to get this user id when i
153:08
click on this button and make a delete
153:10
request and delete the specific user
153:12
so i'm going to save the changes back to
153:15
the index.js
153:16
and here i'm going to make a delete
153:17
request so here i'm going to create
153:20
the if statement so down here i'm going
153:22
to say a
153:23
window dot location
153:27
dot path name if it is equal to
153:30
the root path then i'm gonna execute
153:33
this if statement
153:34
because as you know i don't have any
153:36
href attribute to this anchor tag
153:38
so when i click on this anchor tag i'm
153:41
not gonna navigate the user
153:42
anywhere else let me just back to the
153:44
index.js
153:45
and inside this if statement here i'm
153:47
going to say
153:49
dollar on delete i'm going to create a
153:52
variable
153:52
dollar on delete and i'm going to select
153:54
my delete button
153:56
here i'm going to call dollar in the
153:57
parenthesis
153:59
i'm going to say dot table i'm going to
154:01
select the table
154:02
then select table body table data
154:06
element and select anchor tag with
154:09
delete class as you can notice i have
154:12
this delete class to this anchor tag i'm
154:15
gonna select
154:16
it so when i click on this button
154:20
so here i'm gonna say on delete dot
154:24
click when i click on this button i'm
154:26
gonna execute this
154:27
function and i'm gonna get the data id
154:30
of this anchor tag so here i'm gonna say
154:32
var
154:33
id is equal to dollar
154:36
this dot attribute i'm gonna call a
154:40
method attribute and in the double code
154:42
i'm gonna say data
154:43
id so using this statement i'm going to
154:46
get the current user id
154:48
from this data attribute
154:51
now just after that once i have this id
154:54
inside this id variable
154:55
i can make a request so what i'm going
154:58
to do is i'm going to just copy
155:00
this request variable paste it down here
155:04
and inside this request i'm going to
155:06
make a request to this delete route
155:08
as you know i'm going to just call this
155:10
api user and
155:12
pass id to it so here i'm going to say
155:15
api user
155:16
and pass id i don't have this data
155:18
variable here so i'm going to get rid of
155:20
this data variable and just specify this
155:22
id variable
155:23
just for that this is a type of delete
155:26
request
155:26
so i'm going to get rid of this boot and
155:28
say here delete
155:30
and then i'm not going to specify any
155:32
data with this request so i'm going to
155:34
get rid of this data from here
155:36
down here i'm going to get the user
155:38
permission to delete the record so here
155:40
i'm gonna say
155:41
if and in the if statement i'm gonna
155:43
call
155:44
the confirm method this is the inbuilt
155:47
method in javascript
155:48
this will just get the permission from
155:50
the user here i'm gonna say confirm
155:52
and in the double quote i'm going to say
155:54
do you really
155:57
want to delete this record
156:01
then i'm going to space over here curly
156:02
braces and inside this if statement
156:05
i'm going to say if the user specified
156:07
yes i'm going to execute
156:09
this if statement so here i'm going to
156:11
call the ajax request
156:13
this one copy this request and paste it
156:16
inside this if statement
156:17
in this alert i'm going to say data
156:20
deleted
156:21
successfully and then i'm going to
156:23
reload the browser so here i'm going to
156:24
say
156:25
location dot
156:28
reload back to the browser and reload it
156:31
so let me just add a new user here i'm
156:34
going to say
156:35
user 1 example
156:40
user update test.com
156:44
specify gender mail inactive
156:47
when i click on the save button it will
156:49
insert this record inside the mongodb
156:50
database
156:51
back to the all users and here you can
156:54
notice i have this record
156:56
let me just delete it so i'm going to
156:57
click on this delete button
156:59
when i click on it this will just ask me
157:02
do you really want to delete this record
157:04
yes i want i'm going to click on this ok
157:07
button when i click on it you can notice
157:09
i have the alert message data deleted
157:11
successfully when i press ok
157:13
as you can notice this will delete this
157:15
record from the database
157:18
at the end let me show you how this
157:19
application work i'm going to add a new
157:22
user using this
157:22
new user button i'm going to click on it
157:25
and add a new user
157:26
here i'm going to specify username daily
157:30
tuition and inside this email
157:33
i'm gonna say daily tuition
157:36
at the date gmail.com
157:40
specify gender mail and specify status
157:44
active let me click on the save button
157:46
to save this record in the database
157:47
when i click on it the data is now
157:50
successfully inserted in the mongodb
157:51
database
157:52
press ok and back to the all users
157:55
so here you have your data but you can
157:58
notice i misspelled this spelling
158:00
of this daily illusion let me just
158:02
update it so i'm going to click on this
158:03
update icon and right from here
158:07
i'm going to just update this spelling
158:09
so here i'm going to say
158:10
t so now we have the deletion inside
158:13
this text box
158:14
you can notice all the data of the
158:16
record is automatically filled
158:18
inside this form just after that i'm
158:20
gonna click on the save button to update
158:22
this record
158:23
when i click on it i'm gonna have alert
158:24
message data updated successfully
158:27
click on the save and back to the all
158:29
users as you can notice the data is now
158:31
successfully updated
158:32
just after that i want to delete this
158:35
record from this table
158:36
so i'm gonna click on this delete button
158:39
when i click on this delete button
158:40
the application will ask you do you
158:42
really want to delete this data
158:44
yes i want to delete it so i'm going to
158:46
click on this ok when i click on this ok
158:48
you will get an alert message data
158:50
deleted successfully and when you click
158:52
ok the data is successfully deleted from
158:55
your database
158:57
now i hope you understand how to create
158:58
crude application using express
159:00
and mongodb database if you find
159:03
anything useful
159:04
don't forget to click on the like button
159:05
of this video make sure you click on the
159:07
subscribe button to get
159:08
all the latest videos if you want to
159:10
download the source code
159:11
the link is in the description that is
159:13
all for now i will see you
159:15
in the next one
159:25
[Music]
159:36
you